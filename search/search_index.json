{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Machinable! Machinable gives developers the ability to store and manage their application's data in a structured, validated, RESTful way without having to write any backend code. Included Features API Resources API Resources are defined endpoints that store structured data which is validated on creation based on the JSON Schema that describes your application's data. User/API Key Access Create API Keys to manage your project data and allow users to register to your project. Users then have access to API Resources based on authorization policies that you configure. Web Hooks POST events to your custom application endpoints when resources are created, edited, or deleted. Implement business logic and build on top of Machinable. Goal The goal of Machinable is to provide developers an abstraction to their project's CRUD HTTP APIs. This let's you focus on the important parts of your project; User experience and business logic. With Machinable's combination of CRUD interfaces and Web Hooks , developers can quickly develop prototypes or even full scale production applications. See our list of open source sample applications built on Machinable.","title":"Overview"},{"location":"#welcome-to-machinable","text":"Machinable gives developers the ability to store and manage their application's data in a structured, validated, RESTful way without having to write any backend code.","title":"Welcome to Machinable!"},{"location":"#included-features","text":"","title":"Included Features"},{"location":"#api-resources","text":"API Resources are defined endpoints that store structured data which is validated on creation based on the JSON Schema that describes your application's data.","title":"API Resources"},{"location":"#userapi-key-access","text":"Create API Keys to manage your project data and allow users to register to your project. Users then have access to API Resources based on authorization policies that you configure.","title":"User/API Key Access"},{"location":"#web-hooks","text":"POST events to your custom application endpoints when resources are created, edited, or deleted. Implement business logic and build on top of Machinable.","title":"Web Hooks"},{"location":"#goal","text":"The goal of Machinable is to provide developers an abstraction to their project's CRUD HTTP APIs. This let's you focus on the important parts of your project; User experience and business logic. With Machinable's combination of CRUD interfaces and Web Hooks , developers can quickly develop prototypes or even full scale production applications. See our list of open source sample applications built on Machinable.","title":"Goal"},{"location":"about/","text":"Hi, my name is Nick Sjostrom / anothrNick . I created Machinable as a way to quickly bootstrap my projects' storage, REST APIs, and user management. I quickly realized that if this was useful to me, it may be useful to others as well. If you have any feedback, issues, or comments regarding Machinable open an issue or send me an email at","title":"About"},{"location":"getting_started/","text":"Register Navigate to https://machinable.io and register for an account. This will require a valid email address. Confirm your email by following the link in your inbox. You will then be able to login to Machinable and start managing your projects! Create A Project After logging in for the first time you will see a fairly empty screen which invites you to create a new project. Click the 'Create A Project' button to get started. Provide the necessary information for your project: Project Icon Select from multiple icons. This can help identify your project in the list. Name The short, but descriptive, name of your project. Slug This is the subdomain that will be given to your project in the form of https://{project_slug}.machinable.io . Description A longer description of your project. What are you using this project for? Are there any relevant links that this project should reference? Etc. User Registration This specifies if anyone with the registration URL can register a new user with your project. If this is disabled users can only be added through your project's the Machinable dashboard. This can be changed at any time . Once you have filled out the form, click 'Create'. Your project is now ready to use! What's Next? Create an API Resource Create and query some data Create an application that uses your Machinable project","title":"Getting Started"},{"location":"getting_started/#register","text":"Navigate to https://machinable.io and register for an account. This will require a valid email address.","title":"Register"},{"location":"getting_started/#create-a-project","text":"After logging in for the first time you will see a fairly empty screen which invites you to create a new project. Click the 'Create A Project' button to get started.","title":"Create A Project"},{"location":"getting_started/#whats-next","text":"Create an API Resource Create and query some data Create an application that uses your Machinable project","title":"What's Next?"},{"location":"release_notes/","text":"API Changelog 0.36.2 Web Hooks OpenAPI Spec ... skipped some, sorry. 0.11.0 Resource and Collection usage metrics 0.10.1 Project user refresh tokens 0.10.0 Fix pagination URL scheme Editable access of users and api keys 0.9.0 Fix collection PUT bug Delete project support Total count is always filtered count Paginate logs and log filters 0.8.0 Support ReCaptcha on register Misc. additions to slug blacklist UI Changelog 0.21.0 Web Hooks Documentation ... skipped some, sorry. 0.9.2 - March 16th, 2019 Use Monaco Editor / react-monaco-editor to edit API Resource properties 0.9.1 - March 15th, 2019 Fix status code chart, use automatic tick steps 0.9.0 Resource and Collection usage metrics 0.8.0 Editable access of users and api keys User and API Key IDs copy button functional 0.7.0 Links to documentation Delete project functional Filters on project log page, paginate log response Link to JSON schema page from properties field 0.6.1 Add ReCaptcha on register page Fix docker build Dummy user settings screens Re-style home/projects page","title":"Release Notes"},{"location":"release_notes/#api-changelog","text":"","title":"API Changelog"},{"location":"release_notes/#0362","text":"Web Hooks OpenAPI Spec ... skipped some, sorry.","title":"0.36.2"},{"location":"release_notes/#0110","text":"Resource and Collection usage metrics","title":"0.11.0"},{"location":"release_notes/#0101","text":"Project user refresh tokens","title":"0.10.1"},{"location":"release_notes/#0100","text":"Fix pagination URL scheme Editable access of users and api keys","title":"0.10.0"},{"location":"release_notes/#090","text":"Fix collection PUT bug Delete project support Total count is always filtered count Paginate logs and log filters","title":"0.9.0"},{"location":"release_notes/#080","text":"Support ReCaptcha on register Misc. additions to slug blacklist","title":"0.8.0"},{"location":"release_notes/#ui-changelog","text":"","title":"UI Changelog"},{"location":"release_notes/#0210","text":"Web Hooks Documentation ... skipped some, sorry.","title":"0.21.0"},{"location":"release_notes/#092-march-16th-2019","text":"Use Monaco Editor / react-monaco-editor to edit API Resource properties","title":"0.9.2 - March 16th, 2019"},{"location":"release_notes/#091-march-15th-2019","text":"Fix status code chart, use automatic tick steps","title":"0.9.1 - March 15th, 2019"},{"location":"release_notes/#090_1","text":"Resource and Collection usage metrics","title":"0.9.0"},{"location":"release_notes/#080_1","text":"Editable access of users and api keys User and API Key IDs copy button functional","title":"0.8.0"},{"location":"release_notes/#070","text":"Links to documentation Delete project functional Filters on project log page, paginate log response Link to JSON schema page from properties field","title":"0.7.0"},{"location":"release_notes/#061","text":"Add ReCaptcha on register page Fix docker build Dummy user settings screens Re-style home/projects page","title":"0.6.1"},{"location":"account/apikeys/","text":"","title":"Apikeys"},{"location":"account/billing/","text":"","title":"Billing"},{"location":"account/contact/","text":"","title":"Contact"},{"location":"account/password/","text":"","title":"Password"},{"location":"account/security/","text":"","title":"Security"},{"location":"account/support/","text":"","title":"Support"},{"location":"api/introduction/","text":"","title":"Introduction"},{"location":"projects/access/","text":"Access Project Access provides tools to create and manage Project Users and API Keys. These two entities are how someone or something interacts with the Project data stored for an API Resources. Note If your authentication is disabled, anyone can access API Resources. Project Users and API Keys are note necessary in this case. Users Project Users are intended to be end users of your Machinable Project. They are able to acquire a session and interact with the Project Data based on access policies. Create User To create a new Project User navigate to your Project's Access Users page. Click the Create A User button to open the new user modal and enter the new user's information. Username This user's username, used to login and obtain a session. Password This user's password, used to login and obtain a session. This should be recorded and kept secret, you will not be able to retrieve the password. Role Access The User's Role controls what objects they are able to access. Users will only have access to objects that they have created, depending on the Resource/Collection access policy. Administrators will have access to all created objects. The User's Access will determine how they can interact with the data. Read will allow the User to Get and List objects. Write will allow the User to Create, Edit, and Delete objects. Edit User To edit a User's Role Access, click the ellipsis button for that user and select Edit Access . Authentication In order to make authenticated requests to API Resources and Collections, Project Users will need an access token. First, the user will need to obtain a session. To do that, make an HTTP Basic authentication request to your project's /sessions endpoint. This will return an access_token and a refresh_token in the form of JSON Web Tokens : Bash 1 2 3 4 5 6 7 8 # base64 encode username|password to make HTTP Basic authn request $ echo testUser:hunter2 | base64 dGVzdFVzZXI6aHVudGVyMgo = # POST credentials to /sessions/ endpoint to recieve access token $ curl -X POST \\ https://pet-demo.machinable.io/sessions/ \\ -H authorization: Basic dGVzdFVzZXI6aHVudGVyMg== Python 1 2 3 4 5 6 7 8 9 10 11 import requests url = https://pet-demo.machinable.io/sessions/ headers = { authorization : Basic dGVzdFVzZXI6aHVudGVyMg== } response = requests . request ( POST , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var data = null ; var xhr = new XMLHttpRequest (); xhr . withCredentials = true ; xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( POST , https://pet-demo.machinable.io/sessions/ ); xhr . setRequestHeader ( authorization , Basic dGVzdFVzZXI6aHVudGVyMg== ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/sessions/ req , _ := http . NewRequest ( POST , url , nil ) req . Header . Add ( authorization , Basic dGVzdFVzZXI6aHVudGVyMg== ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 { access_token : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTIzMjI4MTksInByb2plY3RzIjp7InBldC1kZW1vIjp0cnVlfSwidXNlciI6eyJhY3RpdmUiOnRydWUsImlkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIiwibmFtZSI6InRlc3RVc2VyIiwicmVhZCI6dHJ1ZSwidHlwZSI6InByb2plY3QiLCJ3cml0ZSI6dHJ1ZX19.93H4H3FyPGrzOGb3WHRO7RLUGezpYxbVki7oGqdyA6E , message : Successfully logged in , refresh_token : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTI1ODExMTksInNlc3Npb25faWQiOiI1Yzg2OGQ3ZmE3NzQ4YmIyMjQ4MzNmNGMiLCJ1c2VyX2lkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIn0.wWyb-nNff3RBw73D1hqN9k8U8_pKMHWGShMwA9YvSAc , session_id : 5c868d7fa7748bb224833f4c } Once the user has a session, authenticated requests can be made by adding the Authorization header with the bearer text and access_token to each request: 1 Authorization: bearer { access_token } Access tokens have a limited lifetime of 5 minutes. They then need to be exchanged for a new Access token using the refresh token returned in the /sessions/ response. Refresh Tokens After the access token has expired, client requests will return with a 401 Unauthorized status code. When this happens, the client can attempt to \"refresh\" their existing session by exchanging the refresh token for a new access token. This is done by making a POST to the project's /sessions/refresh endpoint with the header Authorization: Bearer {refresh_token} . Refer to the example request below to see how the refresh token is used to get a new access token: Bash 1 2 3 curl -X POST \\ https://pet-demo.machinable.io/sessions/refresh/ \\ -H authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTI1ODExMTksInNlc3Npb25faWQiOiI1Yzg2OGQ3ZmE3NzQ4YmIyMjQ4MzNmNGMiLCJ1c2VyX2lkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIn0.wWyb-nNff3RBw73D1hqN9k8U8_pKMHWGShMwA9YvSAc Python 1 2 3 4 5 6 7 8 9 10 11 import requests url = https://pet-demo.machinable.io/sessions/refresh/ headers = { authorization : Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTI1ODExMTksInNlc3Npb25faWQiOiI1Yzg2OGQ3ZmE3NzQ4YmIyMjQ4MzNmNGMiLCJ1c2VyX2lkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIn0.wWyb-nNff3RBw73D1hqN9k8U8_pKMHWGShMwA9YvSAc } response = requests . request ( POST , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var data = null ; var xhr = new XMLHttpRequest (); xhr . withCredentials = true ; xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( POST , https://pet-demo.machinable.io/sessions/refresh/ ); xhr . setRequestHeader ( authorization , Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTI1ODExMTksInNlc3Npb25faWQiOiI1Yzg2OGQ3ZmE3NzQ4YmIyMjQ4MzNmNGMiLCJ1c2VyX2lkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIn0.wWyb-nNff3RBw73D1hqN9k8U8_pKMHWGShMwA9YvSAc ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/sessions/refresh/ req , _ := http . NewRequest ( POST , url , nil ) req . Header . Add ( authorization , Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTI1ODExMTksInNlc3Npb25faWQiOiI1Yzg2OGQ3ZmE3NzQ4YmIyMjQ4MzNmNGMiLCJ1c2VyX2lkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIn0.wWyb-nNff3RBw73D1hqN9k8U8_pKMHWGShMwA9YvSAc ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 HTTP/ 1.1 200 OK { access_token : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTIzMjI4MTksInByb2plY3RzIjp7InBldC1kZW1vIjp0cnVlfSwidXNlciI6eyJhY3RpdmUiOnRydWUsImlkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIiwibmFtZSI6InRlc3RVc2VyIiwicmVhZCI6dHJ1ZSwidHlwZSI6InByb2plY3QiLCJ3cml0ZSI6dHJ1ZX19.93H4H3FyPGrzOGb3WHRO7RLUGezpYxbVki7oGqdyA6E } The client can then use this new access token to make requests. Note Refresh tokens also expire after a certain amount of time. If the refresh request returns 401 Unauthorized then the refresh token is expired as well and the user will need to obtain a new session by logging in again. API Keys Project API Keys are intended to be used by other software/machines. They can be useful if you want to proxy user requests, automatically manage data, or run tests against Machinable. Create API Key To create a new Project API Key navigate to your Project's Access API Keys page. Click the Generate API Token button to open the new API Key modal and enter the API Key's information. Generated Key This is the automatically generated API Key. Be sure to copy the API Key and save it somewhere safe as you will not be able to view it again. Description The description is meant to help you identify the API Key being used by your client and Machinable logs. Role Access This is identical to the Project User Role Access. The API Key's Role controls what objects it is able to access. Users will only have access to objects that they have created, depending on the Resource/Collection access policy. Administrators will have access to all created objects. The API Key's Access will determine how it can interact with the data. Read will allow the API Key to Get and List objects. Write will allow the API Key to Create, Edit, and Delete objects. Edit API Key To edit an API Key's Role Access, click the ellipsis button for that API Key and select Edit Access . Authentication To make authenticated requests with a Project API Key, add the Authorization header with the apikey text to each request: 1 Authorization: apikey { api_key_string }","title":"Access"},{"location":"projects/access/#access","text":"Project Access provides tools to create and manage Project Users and API Keys. These two entities are how someone or something interacts with the Project data stored for an API Resources. Note If your authentication is disabled, anyone can access API Resources. Project Users and API Keys are note necessary in this case.","title":"Access"},{"location":"projects/access/#users","text":"Project Users are intended to be end users of your Machinable Project. They are able to acquire a session and interact with the Project Data based on access policies.","title":"Users"},{"location":"projects/access/#create-user","text":"To create a new Project User navigate to your Project's Access Users page. Click the Create A User button to open the new user modal and enter the new user's information. Username This user's username, used to login and obtain a session. Password This user's password, used to login and obtain a session. This should be recorded and kept secret, you will not be able to retrieve the password. Role Access The User's Role controls what objects they are able to access. Users will only have access to objects that they have created, depending on the Resource/Collection access policy. Administrators will have access to all created objects. The User's Access will determine how they can interact with the data. Read will allow the User to Get and List objects. Write will allow the User to Create, Edit, and Delete objects.","title":"Create User"},{"location":"projects/access/#edit-user","text":"To edit a User's Role Access, click the ellipsis button for that user and select Edit Access .","title":"Edit User"},{"location":"projects/access/#authentication","text":"In order to make authenticated requests to API Resources and Collections, Project Users will need an access token. First, the user will need to obtain a session. To do that, make an HTTP Basic authentication request to your project's /sessions endpoint. This will return an access_token and a refresh_token in the form of JSON Web Tokens : Bash 1 2 3 4 5 6 7 8 # base64 encode username|password to make HTTP Basic authn request $ echo testUser:hunter2 | base64 dGVzdFVzZXI6aHVudGVyMgo = # POST credentials to /sessions/ endpoint to recieve access token $ curl -X POST \\ https://pet-demo.machinable.io/sessions/ \\ -H authorization: Basic dGVzdFVzZXI6aHVudGVyMg== Python 1 2 3 4 5 6 7 8 9 10 11 import requests url = https://pet-demo.machinable.io/sessions/ headers = { authorization : Basic dGVzdFVzZXI6aHVudGVyMg== } response = requests . request ( POST , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var data = null ; var xhr = new XMLHttpRequest (); xhr . withCredentials = true ; xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( POST , https://pet-demo.machinable.io/sessions/ ); xhr . setRequestHeader ( authorization , Basic dGVzdFVzZXI6aHVudGVyMg== ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/sessions/ req , _ := http . NewRequest ( POST , url , nil ) req . Header . Add ( authorization , Basic dGVzdFVzZXI6aHVudGVyMg== ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 { access_token : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTIzMjI4MTksInByb2plY3RzIjp7InBldC1kZW1vIjp0cnVlfSwidXNlciI6eyJhY3RpdmUiOnRydWUsImlkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIiwibmFtZSI6InRlc3RVc2VyIiwicmVhZCI6dHJ1ZSwidHlwZSI6InByb2plY3QiLCJ3cml0ZSI6dHJ1ZX19.93H4H3FyPGrzOGb3WHRO7RLUGezpYxbVki7oGqdyA6E , message : Successfully logged in , refresh_token : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTI1ODExMTksInNlc3Npb25faWQiOiI1Yzg2OGQ3ZmE3NzQ4YmIyMjQ4MzNmNGMiLCJ1c2VyX2lkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIn0.wWyb-nNff3RBw73D1hqN9k8U8_pKMHWGShMwA9YvSAc , session_id : 5c868d7fa7748bb224833f4c } Once the user has a session, authenticated requests can be made by adding the Authorization header with the bearer text and access_token to each request: 1 Authorization: bearer { access_token } Access tokens have a limited lifetime of 5 minutes. They then need to be exchanged for a new Access token using the refresh token returned in the /sessions/ response.","title":"Authentication"},{"location":"projects/access/#refresh-tokens","text":"After the access token has expired, client requests will return with a 401 Unauthorized status code. When this happens, the client can attempt to \"refresh\" their existing session by exchanging the refresh token for a new access token. This is done by making a POST to the project's /sessions/refresh endpoint with the header Authorization: Bearer {refresh_token} . Refer to the example request below to see how the refresh token is used to get a new access token: Bash 1 2 3 curl -X POST \\ https://pet-demo.machinable.io/sessions/refresh/ \\ -H authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTI1ODExMTksInNlc3Npb25faWQiOiI1Yzg2OGQ3ZmE3NzQ4YmIyMjQ4MzNmNGMiLCJ1c2VyX2lkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIn0.wWyb-nNff3RBw73D1hqN9k8U8_pKMHWGShMwA9YvSAc Python 1 2 3 4 5 6 7 8 9 10 11 import requests url = https://pet-demo.machinable.io/sessions/refresh/ headers = { authorization : Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTI1ODExMTksInNlc3Npb25faWQiOiI1Yzg2OGQ3ZmE3NzQ4YmIyMjQ4MzNmNGMiLCJ1c2VyX2lkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIn0.wWyb-nNff3RBw73D1hqN9k8U8_pKMHWGShMwA9YvSAc } response = requests . request ( POST , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var data = null ; var xhr = new XMLHttpRequest (); xhr . withCredentials = true ; xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( POST , https://pet-demo.machinable.io/sessions/refresh/ ); xhr . setRequestHeader ( authorization , Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTI1ODExMTksInNlc3Npb25faWQiOiI1Yzg2OGQ3ZmE3NzQ4YmIyMjQ4MzNmNGMiLCJ1c2VyX2lkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIn0.wWyb-nNff3RBw73D1hqN9k8U8_pKMHWGShMwA9YvSAc ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/sessions/refresh/ req , _ := http . NewRequest ( POST , url , nil ) req . Header . Add ( authorization , Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTI1ODExMTksInNlc3Npb25faWQiOiI1Yzg2OGQ3ZmE3NzQ4YmIyMjQ4MzNmNGMiLCJ1c2VyX2lkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIn0.wWyb-nNff3RBw73D1hqN9k8U8_pKMHWGShMwA9YvSAc ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 HTTP/ 1.1 200 OK { access_token : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTIzMjI4MTksInByb2plY3RzIjp7InBldC1kZW1vIjp0cnVlfSwidXNlciI6eyJhY3RpdmUiOnRydWUsImlkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIiwibmFtZSI6InRlc3RVc2VyIiwicmVhZCI6dHJ1ZSwidHlwZSI6InByb2plY3QiLCJ3cml0ZSI6dHJ1ZX19.93H4H3FyPGrzOGb3WHRO7RLUGezpYxbVki7oGqdyA6E } The client can then use this new access token to make requests. Note Refresh tokens also expire after a certain amount of time. If the refresh request returns 401 Unauthorized then the refresh token is expired as well and the user will need to obtain a new session by logging in again.","title":"Refresh Tokens"},{"location":"projects/access/#api-keys","text":"Project API Keys are intended to be used by other software/machines. They can be useful if you want to proxy user requests, automatically manage data, or run tests against Machinable.","title":"API Keys"},{"location":"projects/access/#create-api-key","text":"To create a new Project API Key navigate to your Project's Access API Keys page. Click the Generate API Token button to open the new API Key modal and enter the API Key's information. Generated Key This is the automatically generated API Key. Be sure to copy the API Key and save it somewhere safe as you will not be able to view it again. Description The description is meant to help you identify the API Key being used by your client and Machinable logs. Role Access This is identical to the Project User Role Access. The API Key's Role controls what objects it is able to access. Users will only have access to objects that they have created, depending on the Resource/Collection access policy. Administrators will have access to all created objects. The API Key's Access will determine how it can interact with the data. Read will allow the API Key to Get and List objects. Write will allow the API Key to Create, Edit, and Delete objects.","title":"Create API Key"},{"location":"projects/access/#edit-api-key","text":"To edit an API Key's Role Access, click the ellipsis button for that API Key and select Edit Access .","title":"Edit API Key"},{"location":"projects/access/#authentication_1","text":"To make authenticated requests with a Project API Key, add the Authorization header with the apikey text to each request: 1 Authorization: apikey { api_key_string }","title":"Authentication"},{"location":"projects/documentation/","text":"Since API Resources are already described with JSON Schema (and Key/Values are just objects ), the OpenAPI specification is compiled and made available to you and your API users. The OpenAPI specification can then be used to write your own backend using the same HTTP Interfaces made available by Machinable or automatically generate clients and UIs. OpenAPI View and download your Project's OpenAPI Specification by navigating to Documentation . From here you can copy the spec or view the spec with Redoc . Redoc Machinable provides hosted documentation using Redoc . Redoc provides dynamic documentation of your Project's API using the OpenAPI specification document. Anyone with the documentation link can view your Project's API Docs!","title":"Documentation"},{"location":"projects/documentation/#openapi","text":"View and download your Project's OpenAPI Specification by navigating to Documentation . From here you can copy the spec or view the spec with Redoc .","title":"OpenAPI"},{"location":"projects/documentation/#redoc","text":"Machinable provides hosted documentation using Redoc . Redoc provides dynamic documentation of your Project's API using the OpenAPI specification document. Anyone with the documentation link can view your Project's API Docs!","title":"Redoc"},{"location":"projects/hooks/","text":"Web Hooks can be configured to send events to custom endpoints when API Resources or Root Keys are created, edited, or deleted. Use Web Hooks to callback to your server in order to implement custom business logic for your app. Manage Web Hooks Navigate to your Project's Web Hooks page and click New Hook to configure a new Web Hook. Create/Edit Hooks Label The human readable label for the Web Hook. Use a short, but descriptive, label so it is easy to identify the purpose of this Hook. Entity Type The entity type is either an AP Resource or Key/Value . Entity Based on the Entity Type, this will contain the list of API Resources or Key/Value Root Keys. Event Which event should trigger this Web Hook? create , edit , or delete ? URL This will be your project's valid URL to POST the Web Hook JSON payload. This can be another Machinable resource (API or Key/Value), but be aware that it will impact your project's request limit. Enabled Whether the Web Hook will trigger on the selected event or not. This can be changed at any time. Note If the Web Hook fails when making a request to the configured URL, the Web Hook will be automatically disabled. Request Headers A map of headers to be sent along with the Web Hook HTTP POST request. Set as many custom headers as needed for your callback server. View Details and Logs Once a Web Hook is configured, select it from the list to view the configured details as well as the logs relevant to each POST request. Payload When a Web Hook is sent, a single request is made to the URL with a JSON payload of the following schema: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 { type : object , properties : { entity_key : { type : string , description : The path name of the API Resource or Root Key of the Key/Value. }, entity_type : { type : string , description : The Machinable type of this payload; API Resource(resource) or Key/Value(json) , enum : [ resource , json ] }, event : { type : string , description : The event that trigger the Web Hook. This should match the configured event. , enum : [ create , edit , delete ] }, payload : { type : object , description : The payload will contain the JSON of the resource relevant to this Web Hook event. }, project_Id : { type : string , format : uuid , description : The UUID of the project } } } See below for an example request that triggers a Web Hook using the Dogs API Resource created previously : 1 2 3 4 5 6 7 8 9 10 11 12 curl -s -X POST -d { name : Lucy , breed : mut , age : 5} -H Authorization: apikey $API_KEY https://pet-demo.machinable.io/api/dogs | jq . { _metadata : { creator : 186f5d7a-58bf-47cd-ae29-cf4137bd8bc9 , creator_type : apikey , created : 1582234699 } , age : 5 , breed : mut , id : b9737cfa-a69e-44e9-8f52-5bb1bed1f5ae , name : Lucy } The request above results in the following Web Hook payload to be sent to the configured URL: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { entity_key : dogs , entity_type : resource , event : create , payload : { _metadata : { created : 1582234699 , creator : 186f5d7a-58bf-47cd-ae29-cf4137bd8bc9 , creator_type : apikey }, age : 5 , breed : mut , id : b9737cfa-a69e-44e9-8f52-5bb1bed1f5ae , name : Lucy }, project_Id : 02327c9f-b523-45b6-b8a1-4cd47565aeba } Options Disable With Headers If needed, Web Hooks can be disabled for a single request by setting the X-Trigger-Hooks header to false . Using the example above, we can disabled the configured Web Hook like so: 1 curl -s -X POST -d { name : Lucy , breed : mut , age : 5} -H Authorization: apikey $API_KEY -H X-Trigger-Hooks: false https://pet-demo.machinable.io/api/dogs This would be useful if your callback server needs to update the created record with some kind of life cycle state (or whatever) and you have a Web Hook configured for edit events. That way you don't end up in an endless loop which exhausts your API request limit.","title":"Web Hooks"},{"location":"projects/hooks/#manage-web-hooks","text":"Navigate to your Project's Web Hooks page and click New Hook to configure a new Web Hook.","title":"Manage Web Hooks"},{"location":"projects/hooks/#createedit-hooks","text":"Label The human readable label for the Web Hook. Use a short, but descriptive, label so it is easy to identify the purpose of this Hook. Entity Type The entity type is either an AP Resource or Key/Value . Entity Based on the Entity Type, this will contain the list of API Resources or Key/Value Root Keys. Event Which event should trigger this Web Hook? create , edit , or delete ? URL This will be your project's valid URL to POST the Web Hook JSON payload. This can be another Machinable resource (API or Key/Value), but be aware that it will impact your project's request limit. Enabled Whether the Web Hook will trigger on the selected event or not. This can be changed at any time. Note If the Web Hook fails when making a request to the configured URL, the Web Hook will be automatically disabled. Request Headers A map of headers to be sent along with the Web Hook HTTP POST request. Set as many custom headers as needed for your callback server.","title":"Create/Edit Hooks"},{"location":"projects/hooks/#view-details-and-logs","text":"Once a Web Hook is configured, select it from the list to view the configured details as well as the logs relevant to each POST request.","title":"View Details and Logs"},{"location":"projects/hooks/#payload","text":"When a Web Hook is sent, a single request is made to the URL with a JSON payload of the following schema: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 { type : object , properties : { entity_key : { type : string , description : The path name of the API Resource or Root Key of the Key/Value. }, entity_type : { type : string , description : The Machinable type of this payload; API Resource(resource) or Key/Value(json) , enum : [ resource , json ] }, event : { type : string , description : The event that trigger the Web Hook. This should match the configured event. , enum : [ create , edit , delete ] }, payload : { type : object , description : The payload will contain the JSON of the resource relevant to this Web Hook event. }, project_Id : { type : string , format : uuid , description : The UUID of the project } } } See below for an example request that triggers a Web Hook using the Dogs API Resource created previously : 1 2 3 4 5 6 7 8 9 10 11 12 curl -s -X POST -d { name : Lucy , breed : mut , age : 5} -H Authorization: apikey $API_KEY https://pet-demo.machinable.io/api/dogs | jq . { _metadata : { creator : 186f5d7a-58bf-47cd-ae29-cf4137bd8bc9 , creator_type : apikey , created : 1582234699 } , age : 5 , breed : mut , id : b9737cfa-a69e-44e9-8f52-5bb1bed1f5ae , name : Lucy } The request above results in the following Web Hook payload to be sent to the configured URL: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { entity_key : dogs , entity_type : resource , event : create , payload : { _metadata : { created : 1582234699 , creator : 186f5d7a-58bf-47cd-ae29-cf4137bd8bc9 , creator_type : apikey }, age : 5 , breed : mut , id : b9737cfa-a69e-44e9-8f52-5bb1bed1f5ae , name : Lucy }, project_Id : 02327c9f-b523-45b6-b8a1-4cd47565aeba }","title":"Payload"},{"location":"projects/hooks/#options","text":"","title":"Options"},{"location":"projects/hooks/#disable-with-headers","text":"If needed, Web Hooks can be disabled for a single request by setting the X-Trigger-Hooks header to false . Using the example above, we can disabled the configured Web Hook like so: 1 curl -s -X POST -d { name : Lucy , breed : mut , age : 5} -H Authorization: apikey $API_KEY -H X-Trigger-Hooks: false https://pet-demo.machinable.io/api/dogs This would be useful if your callback server needs to update the created record with some kind of life cycle state (or whatever) and you have a Web Hook configured for edit events. That way you don't end up in an endless loop which exhausts your API request limit.","title":"Disable With Headers"},{"location":"projects/introduction/","text":"Projects A Machinable Project is a place to create and organize your application's API Resources, Collections of data, Users, and API Keys. Projects are created and managed by a Project Administrator. A project will have a unique hostname, {project-slug}.machinable.io , that will provide access to the project's resources. Use Cases You can use a Machinable Project for many purposes: Build a prototype HTTP API quickly A Dummy HTTP API for test data Store valid JSON objects in an API Resource for your production application Provide a public API to open source data Take a look at our growing list of sample projects to get an idea of what you can use Machinable for. What's Next? Create an API Resource Create a Project User or API Key Create some data","title":"Introduction"},{"location":"projects/introduction/#projects","text":"A Machinable Project is a place to create and organize your application's API Resources, Collections of data, Users, and API Keys. Projects are created and managed by a Project Administrator. A project will have a unique hostname, {project-slug}.machinable.io , that will provide access to the project's resources.","title":"Projects"},{"location":"projects/introduction/#use-cases","text":"You can use a Machinable Project for many purposes: Build a prototype HTTP API quickly A Dummy HTTP API for test data Store valid JSON objects in an API Resource for your production application Provide a public API to open source data Take a look at our growing list of sample projects to get an idea of what you can use Machinable for.","title":"Use Cases"},{"location":"projects/introduction/#whats-next","text":"Create an API Resource Create a Project User or API Key Create some data","title":"What's Next?"},{"location":"projects/json/","text":"Key/Values are just JSON objects, where the full object is accessed by the Root Key. Each layer of the JSON structure can then be accessed, and edited, with HTTP path parameters as keys/indices to the JSON. Manage Root Keys Create a New Key To get started with Machinable Key/Values, navigate to your Project's Key/Value page. From this page you can create, edit, and delete you project's Root Key's as well as their contents. From this page select Create A Key from the empty state area. We will create a sample configuration JSON object with the Root Key of config . Retrieve/Edit JSON Once you've created your Root Key, you can use the JSON Editor to change it's contents. See below as we add some configuration values to the JSON. The JSON value of the root key can then be accessed via HTTP Request: 1 2 3 4 5 6 7 8 9 10 11 $ curl -s https://pet-demo.machinable.io/json/config/ | jq . { database : { address : } , whitelist : [ google.com , machinable.io , reddit.com ] } Access JSON structure with HTTP path parameters as keys/indices to the JSON: 1 2 $ curl -s https://pet-demo.machinable.io/json/config/whitelist/1 | jq . machinable.io Add or edit keys with POST and PUT verbs: 1 2 3 4 5 6 7 8 9 $ curl -s -X POST -d github.com https://pet-demo.machinable.io/json/config/whitelist/0 | jq . github.com $ curl -s https://pet-demo.machinable.io/json/config/whitelist | jq . [ github.com , google.com , machinable.io , reddit.com ] Access By default, access to Root Keys is open to anyone with the project URL. To restrict access, select the gear icon in the top right corner of the Root Key JSON window and change the access settings. Create Authentication is required to create new objects. Read Anyone with the project URL can read objects. Update Authentication is required to update objects. Delete Authentication is required to delete objects. Usage Usage metrics are gathered for any requests made to Root Keys. You can view your project's usage metrics by navigating to Key/Value Usage . Usage reports the following metrics: Requests This is the count of HTTP Requests made to all of the Key/Value JSON in the last 1 hour. Status Codes This visualizes the count of status codes of each request to Key/Value JSON, summarized every 5 minutes, for the past 1 hour. Average Response Times This visualizes the response times of each request to Key/Value JSON, averaged every 5 minutes, for the past 1 hour. Sample Queries Note The sample queries use jq to process and format response JSON. Create data for root key 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 $ curl -s -X PUT -d { 7f98c91d5-e7be-4828-aa42-6866d134af6c : { age : 32, friends : [ Mary , John , Ron ], job : { title : Clerk }, name : Bob }, a973933c-a72c-41db-96c9-1369d196052b : { age : 57, friends : [ Lisa ], job : { title : Engineer }, name : Sam } } https://misc.machinable.io/json/people/ | jq . { 7f98c91d5-e7be-4828-aa42-6866d134af6c : { age : 32 , friends : [ Mary , John , Ron ] , job : { title : Clerk } , name : Bob } , a973933c-a72c-41db-96c9-1369d196052b : { age : 57 , friends : [ Lisa ] , job : { title : Engineer } , name : Sam } } Retrieve individual keys 1 2 3 4 5 6 7 8 9 10 11 12 13 $ curl -s https://misc.machinable.io/json/people/7f98c91d5-e7be-4828-aa42-6866d134af6c | jq . { age : 32 , friends : [ Mary , John , Ron ] , job : { title : Clerk } , name : Bob } Retrieve by index of array 1 2 $ curl -s https://misc.machinable.io/json/people/7f98c91d5-e7be-4828-aa42-6866d134af6c/friends/1 | jq . John Create new key 1 2 3 4 5 6 7 8 $ curl -s -X POST -d 4 https://misc.machinable.io/json/people/7f98c91d5-e7be-4828-aa42-6866d134af6c/job/years | jq . 4 $ curl -s https://misc.machinable.io/json/people/7f98c91d5-e7be-4828-aa42-6866d134af6c/job | jq . { title : Clerk , years : 4 } Update key 1 2 3 4 5 $ curl -s -X PUT -d { title : Manager , years : 1 } https://misc.machinable.io/json/people/7f98c91d5-e7be-4828-aa42-6866d134af6c/job | jq . { title : Manager , years : 1 } Delete key 1 2 3 4 5 6 7 8 9 10 11 12 $ curl -s -X DELETE https://misc.machinable.io/json/people/7f98c91d5-e7be-4828-aa42-6866d134af6c/job | jq . {} $ curl -s https://misc.machinable.io/json/people/7f98c91d5-e7be-4828-aa42-6866d134af6c | jq . { age : 32 , friends : [ Mary , John , Ron ] , name : Bob }","title":"Key/Value"},{"location":"projects/json/#manage-root-keys","text":"","title":"Manage Root Keys"},{"location":"projects/json/#create-a-new-key","text":"To get started with Machinable Key/Values, navigate to your Project's Key/Value page. From this page you can create, edit, and delete you project's Root Key's as well as their contents. From this page select Create A Key from the empty state area. We will create a sample configuration JSON object with the Root Key of config .","title":"Create a New Key"},{"location":"projects/json/#retrieveedit-json","text":"Once you've created your Root Key, you can use the JSON Editor to change it's contents. See below as we add some configuration values to the JSON. The JSON value of the root key can then be accessed via HTTP Request: 1 2 3 4 5 6 7 8 9 10 11 $ curl -s https://pet-demo.machinable.io/json/config/ | jq . { database : { address : } , whitelist : [ google.com , machinable.io , reddit.com ] } Access JSON structure with HTTP path parameters as keys/indices to the JSON: 1 2 $ curl -s https://pet-demo.machinable.io/json/config/whitelist/1 | jq . machinable.io Add or edit keys with POST and PUT verbs: 1 2 3 4 5 6 7 8 9 $ curl -s -X POST -d github.com https://pet-demo.machinable.io/json/config/whitelist/0 | jq . github.com $ curl -s https://pet-demo.machinable.io/json/config/whitelist | jq . [ github.com , google.com , machinable.io , reddit.com ]","title":"Retrieve/Edit JSON"},{"location":"projects/json/#access","text":"By default, access to Root Keys is open to anyone with the project URL. To restrict access, select the gear icon in the top right corner of the Root Key JSON window and change the access settings. Create Authentication is required to create new objects. Read Anyone with the project URL can read objects. Update Authentication is required to update objects. Delete Authentication is required to delete objects.","title":"Access"},{"location":"projects/json/#usage","text":"Usage metrics are gathered for any requests made to Root Keys. You can view your project's usage metrics by navigating to Key/Value Usage . Usage reports the following metrics: Requests This is the count of HTTP Requests made to all of the Key/Value JSON in the last 1 hour. Status Codes This visualizes the count of status codes of each request to Key/Value JSON, summarized every 5 minutes, for the past 1 hour. Average Response Times This visualizes the response times of each request to Key/Value JSON, averaged every 5 minutes, for the past 1 hour.","title":"Usage"},{"location":"projects/json/#sample-queries","text":"Note The sample queries use jq to process and format response JSON.","title":"Sample Queries"},{"location":"projects/json/#create-data-for-root-key","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 $ curl -s -X PUT -d { 7f98c91d5-e7be-4828-aa42-6866d134af6c : { age : 32, friends : [ Mary , John , Ron ], job : { title : Clerk }, name : Bob }, a973933c-a72c-41db-96c9-1369d196052b : { age : 57, friends : [ Lisa ], job : { title : Engineer }, name : Sam } } https://misc.machinable.io/json/people/ | jq . { 7f98c91d5-e7be-4828-aa42-6866d134af6c : { age : 32 , friends : [ Mary , John , Ron ] , job : { title : Clerk } , name : Bob } , a973933c-a72c-41db-96c9-1369d196052b : { age : 57 , friends : [ Lisa ] , job : { title : Engineer } , name : Sam } }","title":"Create data for root key"},{"location":"projects/json/#retrieve-individual-keys","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 $ curl -s https://misc.machinable.io/json/people/7f98c91d5-e7be-4828-aa42-6866d134af6c | jq . { age : 32 , friends : [ Mary , John , Ron ] , job : { title : Clerk } , name : Bob }","title":"Retrieve individual keys"},{"location":"projects/json/#retrieve-by-index-of-array","text":"1 2 $ curl -s https://misc.machinable.io/json/people/7f98c91d5-e7be-4828-aa42-6866d134af6c/friends/1 | jq . John","title":"Retrieve by index of array"},{"location":"projects/json/#create-new-key","text":"1 2 3 4 5 6 7 8 $ curl -s -X POST -d 4 https://misc.machinable.io/json/people/7f98c91d5-e7be-4828-aa42-6866d134af6c/job/years | jq . 4 $ curl -s https://misc.machinable.io/json/people/7f98c91d5-e7be-4828-aa42-6866d134af6c/job | jq . { title : Clerk , years : 4 }","title":"Create new key"},{"location":"projects/json/#update-key","text":"1 2 3 4 5 $ curl -s -X PUT -d { title : Manager , years : 1 } https://misc.machinable.io/json/people/7f98c91d5-e7be-4828-aa42-6866d134af6c/job | jq . { title : Manager , years : 1 }","title":"Update key"},{"location":"projects/json/#delete-key","text":"1 2 3 4 5 6 7 8 9 10 11 12 $ curl -s -X DELETE https://misc.machinable.io/json/people/7f98c91d5-e7be-4828-aa42-6866d134af6c/job | jq . {} $ curl -s https://misc.machinable.io/json/people/7f98c91d5-e7be-4828-aa42-6866d134af6c | jq . { age : 32 , friends : [ Mary , John , Ron ] , name : Bob }","title":"Delete key"},{"location":"projects/resources/","text":"API Resources API Resources are endpoints which store JSON Objects that are described and validated by JSON Schema . This gives you the ability to create API endpoints that will validate the data being saved to it without writing any code. Manage Resources Create a new API Resource To create a new API Resource, navigate to your Project's API page and click the New Resource button. We will create a Dogs resource in our Pet Demo project. Enter the following information into the New Resource fields: Title 1 Dogs Path 1 /dogs Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 { type : object , properties : { age : { description : The age of the dogs. , maximum : 50 , minimum : 0 , type : integer }, breed : { enum : [ lab , bulldog , retriever , hound , mut , other ], type : string }, name : { description : The name of the dog. , maxLength : 32 , minLength : 0 , type : string } }, required : [ name , breed , age ] } The resource schema can be configured with the JSON Schema Builder form. Note Machinable supports a subset of JSON schema dictated by the form. Click Save to save the new Dogs API Resource. Once the Resource is created, you can immediately start Creating and Querying data View Details To view the details of an API Resource, click the ellipsis button and select More . This will open a modal with the details of the selected API Resource: Details Displays helpful information regarding the API Resource including the name, ID, and URL to the Resource's data. Access This tab provides access configuration for the specific resource. To learn more about these options, skip ahead to Configure Access Schema This section shows the configured JSON Schema that describes the data for this API Resource. These are not editable. Data Lists the data stored within this API Resource as a paginated list that can be traversed. Configure Access By default, Project Users API Keys with a \"User\" role will only have access to their data (i.e. objects that have been created by a User/API Key can only be accessed by that User/API Key). This is based on the Machinable managed _metadata object that is stored and returned within each object. Note Users/API Keys with the role of \"Admin\" will have access to all API Resource data, based on that \"User/API Key\" access policy. This access can be changed on a per API Resource basis by enabling the access fields: Create Authentication is required to create new objects. Read Anyone with the project URL can read objects. Update Authentication is required to update objects. Delete Authentication is required to delete objects. Parallel Read When enabled, any User/API Key can read (Get, List) any object, regardless of who/what created it. Disabled by default. Parallel Write When enabled, any User/API Key can write (Update, Delete) any object, regardless of who/what created it. Disabled by default. Querying Data Refer to the Querying documentation to see detailed examples regarding how to query for API Resource and Collection data. The examples in the Querying documentation use a Collection but can be interchanged with the API Resource defined above. Possible Errors API Resources and Collections may return the following error status codes. Status Code Description 400 Bad Request A field is missing or is of the wrong data type based on the JSON Schema for the Resource 401 Unauthorized Missing or invalid authorization header 403 Forbidden The requester is not allowed to access the resource 404 Not Found The resource or object does not exist 500 Internal Server Error An unknown error occurred, try again later Usage Usage metrics are gathered for any requests made to API Resources. You can view your project's usage metrics by navigating to API Usage . Usage reports the following metrics: Requests This is the count of HTTP Requests made to all of the Resource endpoints in the last 1 hour. Storage Storage is distributed across 2 visualizations. The first is the total space in MB used by Resource data. The second is a table showing the amount of space, in MB, each resource is using. Status Codes This visualizes the count of status codes of each request to API Resources, summarized every 5 minutes, for the past 1 hour. Average Response Times This visualizes the response times of each request to API Resources, averaged every 5 minutes, for the past 1 hour.","title":"API Resources"},{"location":"projects/resources/#api-resources","text":"API Resources are endpoints which store JSON Objects that are described and validated by JSON Schema . This gives you the ability to create API endpoints that will validate the data being saved to it without writing any code.","title":"API Resources"},{"location":"projects/resources/#manage-resources","text":"","title":"Manage Resources"},{"location":"projects/resources/#create-a-new-api-resource","text":"To create a new API Resource, navigate to your Project's API page and click the New Resource button. We will create a Dogs resource in our Pet Demo project. Enter the following information into the New Resource fields: Title 1 Dogs Path 1 /dogs Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 { type : object , properties : { age : { description : The age of the dogs. , maximum : 50 , minimum : 0 , type : integer }, breed : { enum : [ lab , bulldog , retriever , hound , mut , other ], type : string }, name : { description : The name of the dog. , maxLength : 32 , minLength : 0 , type : string } }, required : [ name , breed , age ] } The resource schema can be configured with the JSON Schema Builder form. Note Machinable supports a subset of JSON schema dictated by the form. Click Save to save the new Dogs API Resource. Once the Resource is created, you can immediately start Creating and Querying data","title":"Create a new API Resource"},{"location":"projects/resources/#view-details","text":"To view the details of an API Resource, click the ellipsis button and select More . This will open a modal with the details of the selected API Resource: Details Displays helpful information regarding the API Resource including the name, ID, and URL to the Resource's data. Access This tab provides access configuration for the specific resource. To learn more about these options, skip ahead to Configure Access Schema This section shows the configured JSON Schema that describes the data for this API Resource. These are not editable. Data Lists the data stored within this API Resource as a paginated list that can be traversed.","title":"View Details"},{"location":"projects/resources/#configure-access","text":"By default, Project Users API Keys with a \"User\" role will only have access to their data (i.e. objects that have been created by a User/API Key can only be accessed by that User/API Key). This is based on the Machinable managed _metadata object that is stored and returned within each object. Note Users/API Keys with the role of \"Admin\" will have access to all API Resource data, based on that \"User/API Key\" access policy. This access can be changed on a per API Resource basis by enabling the access fields: Create Authentication is required to create new objects. Read Anyone with the project URL can read objects. Update Authentication is required to update objects. Delete Authentication is required to delete objects. Parallel Read When enabled, any User/API Key can read (Get, List) any object, regardless of who/what created it. Disabled by default. Parallel Write When enabled, any User/API Key can write (Update, Delete) any object, regardless of who/what created it. Disabled by default.","title":"Configure Access"},{"location":"projects/resources/#querying-data","text":"Refer to the Querying documentation to see detailed examples regarding how to query for API Resource and Collection data. The examples in the Querying documentation use a Collection but can be interchanged with the API Resource defined above.","title":"Querying Data"},{"location":"projects/resources/#possible-errors","text":"API Resources and Collections may return the following error status codes. Status Code Description 400 Bad Request A field is missing or is of the wrong data type based on the JSON Schema for the Resource 401 Unauthorized Missing or invalid authorization header 403 Forbidden The requester is not allowed to access the resource 404 Not Found The resource or object does not exist 500 Internal Server Error An unknown error occurred, try again later","title":"Possible Errors"},{"location":"projects/resources/#usage","text":"Usage metrics are gathered for any requests made to API Resources. You can view your project's usage metrics by navigating to API Usage . Usage reports the following metrics: Requests This is the count of HTTP Requests made to all of the Resource endpoints in the last 1 hour. Storage Storage is distributed across 2 visualizations. The first is the total space in MB used by Resource data. The second is a table showing the amount of space, in MB, each resource is using. Status Codes This visualizes the count of status codes of each request to API Resources, summarized every 5 minutes, for the past 1 hour. Average Response Times This visualizes the response times of each request to API Resources, averaged every 5 minutes, for the past 1 hour.","title":"Usage"},{"location":"projects/security/","text":"Security The security page provides request logs, made by project users as well as project administrators, and active project user sessions, which can be revoked if needed. Logs To view request logs for your project, navigate to the project's Security Logs page. This page shows all request logs for the last 24 hours. Logs include request path, response status code, initiator, and timestamp. The initiator is the name of the requester, whether it be a project user, api key description, or project administrator. Logs can be filtered by clicking the Filter button at the top right of the screen. Logs are filterable by Requester Type and Status Code. Sessions To view active Project User sessions, navigate to the project's Security Sessions page. This page shows all active Project User sessions with helpful information including client location, IP Address, and the last time the client refreshed their access token. Sessions can be revoked at any time by a Project Administrator by clicking the Revoke button for the user. This will require the Project User to login again. Note Revoking a session does not guarantee that a Project User will need to login again immediately . Their existing access token, if they have one, will allow them to make authenticated requests until that access token has expired.","title":"Security"},{"location":"projects/security/#security","text":"The security page provides request logs, made by project users as well as project administrators, and active project user sessions, which can be revoked if needed.","title":"Security"},{"location":"projects/security/#logs","text":"To view request logs for your project, navigate to the project's Security Logs page. This page shows all request logs for the last 24 hours. Logs include request path, response status code, initiator, and timestamp. The initiator is the name of the requester, whether it be a project user, api key description, or project administrator. Logs can be filtered by clicking the Filter button at the top right of the screen. Logs are filterable by Requester Type and Status Code.","title":"Logs"},{"location":"projects/security/#sessions","text":"To view active Project User sessions, navigate to the project's Security Sessions page. This page shows all active Project User sessions with helpful information including client location, IP Address, and the last time the client refreshed their access token. Sessions can be revoked at any time by a Project Administrator by clicking the Revoke button for the user. This will require the Project User to login again. Note Revoking a session does not guarantee that a Project User will need to login again immediately . Their existing access token, if they have one, will allow them to make authenticated requests until that access token has expired.","title":"Sessions"},{"location":"projects/settings/","text":"Project settings can be accessed by navigating to the Settings tab of the project. This page provides the Project Administrators with the Project Name and Hostnames, both of which can be copied to clipboard by clicking the Copy button. The project settings page also exposes the option to enable and disable project Authentication, as well as an option to delete the project User Registration This flag is a project level setting that determines whether users can openly register to your project. If it is disabled , users can only be created from within your project's Machinable dashboard. If it is enabled , anyone with the link can register a new user and begin interacting with your project's API. Delete Project Danger Deleting a Project will delete all related data including API Resources, Key/Values and their associated data, Project Users, API Keys, Logs, and Sessions. This is a permanent action that can not be undone . To delete a project: Be absolutely sure that you want to delete the project, this action is permanent and can not be undone. Click the Delete Project button. Confirm you want to delete the project by selecting the Yes, I'm Sure button on the confirmation dialog Your project will then be completely wiped off of the earth and you will be redirected to the project list page.","title":"Settings"},{"location":"projects/settings/#user-registration","text":"This flag is a project level setting that determines whether users can openly register to your project. If it is disabled , users can only be created from within your project's Machinable dashboard. If it is enabled , anyone with the link can register a new user and begin interacting with your project's API.","title":"User Registration"},{"location":"projects/settings/#delete-project","text":"Danger Deleting a Project will delete all related data including API Resources, Key/Values and their associated data, Project Users, API Keys, Logs, and Sessions. This is a permanent action that can not be undone . To delete a project: Be absolutely sure that you want to delete the project, this action is permanent and can not be undone. Click the Delete Project button. Confirm you want to delete the project by selecting the Yes, I'm Sure button on the confirmation dialog Your project will then be completely wiped off of the earth and you will be redirected to the project list page.","title":"Delete Project"},{"location":"querying_data/crud/","text":"Machinable's main feature is the ability to perform CRUD (Create, Read, Update, Delete) operations on your project's API Resource endpoints. API Resources provide data validation based on the JSON schema. Note See API Resources for more information about data validation with JSON Schema. All examples will be using the Pet Demo project, which has the following project URL: 1 https://pet-demo.machinable.io Authentication Note If your project authentication policy is disabled, you do not need to provide an Authorization header in your requests. The examples on this page do not make use of an Authorization header. Depending on how you are accessing your project's data, you may need to authenticate your requests. API Keys To make authenticated requests with an API Key , add the Authorization header with the apikey text to each request: 1 Authorization: apikey { api_key_string } Users User authenticated requests require a bit more work. First, the user will need to acquire a session. To do that, make an HTTP Basic authentication request to your project's /sessions endpoint. This will return an access_token and a refresh_token in the form of JSON Web Tokens : Bash 1 2 3 4 5 6 7 8 # base64 encode username|password to make HTTP Basic authn request $ echo testUser:hunter2 | base64 dGVzdFVzZXI6aHVudGVyMgo = # POST credentials to /sessions/ endpoint to recieve access token $ curl -X POST \\ https://pet-demo.machinable.io/sessions/ \\ -H authorization: Basic dGVzdFVzZXI6aHVudGVyMg== Python 1 2 3 4 5 6 7 8 9 10 11 import requests url = https://pet-demo.machinable.io/sessions/ headers = { authorization : Basic dGVzdFVzZXI6aHVudGVyMg== } response = requests . request ( POST , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var data = null ; var xhr = new XMLHttpRequest (); xhr . withCredentials = true ; xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( POST , https://pet-demo.machinable.io/sessions/ ); xhr . setRequestHeader ( authorization , Basic dGVzdFVzZXI6aHVudGVyMg== ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/sessions/ req , _ := http . NewRequest ( POST , url , nil ) req . Header . Add ( authorization , Basic dGVzdFVzZXI6aHVudGVyMg== ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 { access_token : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTIzMjI4MTksInByb2plY3RzIjp7InBldC1kZW1vIjp0cnVlfSwidXNlciI6eyJhY3RpdmUiOnRydWUsImlkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIiwibmFtZSI6InRlc3RVc2VyIiwicmVhZCI6dHJ1ZSwidHlwZSI6InByb2plY3QiLCJ3cml0ZSI6dHJ1ZX19.93H4H3FyPGrzOGb3WHRO7RLUGezpYxbVki7oGqdyA6E , message : Successfully logged in , refresh_token : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTI1ODExMTksInNlc3Npb25faWQiOiI1Yzg2OGQ3ZmE3NzQ4YmIyMjQ4MzNmNGMiLCJ1c2VyX2lkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIn0.wWyb-nNff3RBw73D1hqN9k8U8_pKMHWGShMwA9YvSAc , session_id : 5c868d7fa7748bb224833f4c } Once the user has a session, authenticated requests can be made by adding the Authorization header with the bearer text and access_token to each request: 1 Authorization: bearer { access_token } Info Access tokens have a limited lifetime of 5 minutes. They then need to be exchanged for a new Access token using the refresh token. Refer to Project Users for more information about refreshing an access token. Create Create and store a new object in a specific API Resource. Note These examples are managing data within an API Resource called dogs at /api/dogs , given the correct JSON schema is defined. Bash 1 2 3 $ curl -X POST \\ https://pet-demo.machinable.io/api/dogs \\ -d { name : Murphy , age :2, breed : French Bulldog } Python 1 2 3 4 5 6 7 8 9 10 import requests url = https://pet-demo.machinable.io/api/dogs payload = { \\ name \\ : \\ Murphy \\ , \\ age \\ :2, \\ breed \\ : \\ French Bulldog \\ } headers = {} response = requests . request ( POST , url , data = payload , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = {\\ name\\ :\\ Murphy\\ , \\ age\\ :2, \\ breed\\ : \\ French Bulldog\\ } ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( POST , https://pet-demo.machinable.io/api/dogs ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import ( fmt strings net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs payload := strings . NewReader ( {\\ name\\ :\\ Murphy\\ , \\ age\\ :2, \\ breed\\ : \\ French Bulldog\\ } ) req , _ := http . NewRequest ( POST , url , payload ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 HTTP/ 1.1 201 Created { _metadata : { created : 1552323811 , creator : anonymous , creator_type : anonymous }, age : 2 , breed : French Bulldog , id : 5c8694e3a7748bb224833f51 , name : Murphy } Read Retrieve a single object from a resource or list all objects that exist (paginated). Retrieve single object To retrieve a single object, make a GET request to the resource with the ID of the object as the last path parameter. Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c headers = {} response = requests . request ( GET , url , headers = headers ) print ( response . text ) javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( GET , https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c req , _ := http . NewRequest ( GET , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 HTTP/ 1.1 200 OK { _metadata : { created : 1552326051 , creator : anonymous , creator_type : anonymous }, age : 7 , breed : German Shephard , id : 5c869da3a7748bb224833f5c , name : Max } List objects To retrieve a paginated list of objects for this resource, make a GET request to the resource. Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/api/dogs Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs headers = {} response = requests . request ( GET , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( GET , https://pet-demo.machinable.io/api/dogs ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs req , _ := http . NewRequest ( GET , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 HTTP/ 1.1 200 OK { count : 2 , items : [ { _metadata : { created : 1552323811 , creator : anonymous , creator_type : anonymous }, age : 2 , breed : French Bulldog , id : 5c8694e3a7748bb224833f51 , name : Murphy }, { _metadata : { created : 1552326051 , creator : anonymous , creator_type : anonymous }, age : 7 , breed : German Shephard , id : 5c869da3a7748bb224833f5c , name : Max } ], links : { self : https://pet-demo.machinable.io/api/dogs?_limit=10 _offset=0 } } Notice the resource objects are returned as a list in the items key. A maximum of 10 objects will be returned by default. See Pagination for more information regarding the page limit as well as the other keys in the root of the response JSON. Update Update a single object's values. Bash 1 2 3 4 5 6 curl -X PUT \\ https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c \\ -d { age : 9, name : Maximilian } Python 1 2 3 4 5 6 7 8 9 10 import requests url = https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c payload = { \\n \\ age \\ : 9, \\n \\ name \\ : \\ Maximilian \\ \\n } headers = {} response = requests . request ( PUT , url , data = payload , headers = headers ) print ( response . text ) javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = {\\n \\ age\\ : 9,\\n \\ name\\ : \\ Maximilian\\ \\n} ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( PUT , https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import ( fmt strings net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c payload := strings . NewReader ( {\\n \\ age\\ : 9,\\n \\ name\\ : \\ Maximilian\\ \\n} ) req , _ := http . NewRequest ( PUT , url , payload ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 HTTP/ 1.1 200 OK { _metadata : { created : 1552326051 , creator : anonymous , creator_type : anonymous }, age : 9 , breed : German Shephard , id : 5c869da3a7748bb224833f5c , name : Maximilian } Delete Permanently remove an object. Bash 1 2 curl -X DELETE \\ https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c headers = {} response = requests . request ( DELETE , url , headers = headers ) print ( response . text ) javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( DELETE , https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c req , _ := http . NewRequest ( DELETE , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 HTTP/ 1.1 204 No Content","title":"Manage Data"},{"location":"querying_data/crud/#authentication","text":"Note If your project authentication policy is disabled, you do not need to provide an Authorization header in your requests. The examples on this page do not make use of an Authorization header. Depending on how you are accessing your project's data, you may need to authenticate your requests.","title":"Authentication"},{"location":"querying_data/crud/#api-keys","text":"To make authenticated requests with an API Key , add the Authorization header with the apikey text to each request: 1 Authorization: apikey { api_key_string }","title":"API Keys"},{"location":"querying_data/crud/#users","text":"User authenticated requests require a bit more work. First, the user will need to acquire a session. To do that, make an HTTP Basic authentication request to your project's /sessions endpoint. This will return an access_token and a refresh_token in the form of JSON Web Tokens : Bash 1 2 3 4 5 6 7 8 # base64 encode username|password to make HTTP Basic authn request $ echo testUser:hunter2 | base64 dGVzdFVzZXI6aHVudGVyMgo = # POST credentials to /sessions/ endpoint to recieve access token $ curl -X POST \\ https://pet-demo.machinable.io/sessions/ \\ -H authorization: Basic dGVzdFVzZXI6aHVudGVyMg== Python 1 2 3 4 5 6 7 8 9 10 11 import requests url = https://pet-demo.machinable.io/sessions/ headers = { authorization : Basic dGVzdFVzZXI6aHVudGVyMg== } response = requests . request ( POST , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var data = null ; var xhr = new XMLHttpRequest (); xhr . withCredentials = true ; xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( POST , https://pet-demo.machinable.io/sessions/ ); xhr . setRequestHeader ( authorization , Basic dGVzdFVzZXI6aHVudGVyMg== ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/sessions/ req , _ := http . NewRequest ( POST , url , nil ) req . Header . Add ( authorization , Basic dGVzdFVzZXI6aHVudGVyMg== ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 { access_token : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTIzMjI4MTksInByb2plY3RzIjp7InBldC1kZW1vIjp0cnVlfSwidXNlciI6eyJhY3RpdmUiOnRydWUsImlkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIiwibmFtZSI6InRlc3RVc2VyIiwicmVhZCI6dHJ1ZSwidHlwZSI6InByb2plY3QiLCJ3cml0ZSI6dHJ1ZX19.93H4H3FyPGrzOGb3WHRO7RLUGezpYxbVki7oGqdyA6E , message : Successfully logged in , refresh_token : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTI1ODExMTksInNlc3Npb25faWQiOiI1Yzg2OGQ3ZmE3NzQ4YmIyMjQ4MzNmNGMiLCJ1c2VyX2lkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIn0.wWyb-nNff3RBw73D1hqN9k8U8_pKMHWGShMwA9YvSAc , session_id : 5c868d7fa7748bb224833f4c } Once the user has a session, authenticated requests can be made by adding the Authorization header with the bearer text and access_token to each request: 1 Authorization: bearer { access_token } Info Access tokens have a limited lifetime of 5 minutes. They then need to be exchanged for a new Access token using the refresh token. Refer to Project Users for more information about refreshing an access token.","title":"Users"},{"location":"querying_data/crud/#create","text":"Create and store a new object in a specific API Resource. Note These examples are managing data within an API Resource called dogs at /api/dogs , given the correct JSON schema is defined. Bash 1 2 3 $ curl -X POST \\ https://pet-demo.machinable.io/api/dogs \\ -d { name : Murphy , age :2, breed : French Bulldog } Python 1 2 3 4 5 6 7 8 9 10 import requests url = https://pet-demo.machinable.io/api/dogs payload = { \\ name \\ : \\ Murphy \\ , \\ age \\ :2, \\ breed \\ : \\ French Bulldog \\ } headers = {} response = requests . request ( POST , url , data = payload , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = {\\ name\\ :\\ Murphy\\ , \\ age\\ :2, \\ breed\\ : \\ French Bulldog\\ } ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( POST , https://pet-demo.machinable.io/api/dogs ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import ( fmt strings net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs payload := strings . NewReader ( {\\ name\\ :\\ Murphy\\ , \\ age\\ :2, \\ breed\\ : \\ French Bulldog\\ } ) req , _ := http . NewRequest ( POST , url , payload ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 HTTP/ 1.1 201 Created { _metadata : { created : 1552323811 , creator : anonymous , creator_type : anonymous }, age : 2 , breed : French Bulldog , id : 5c8694e3a7748bb224833f51 , name : Murphy }","title":"Create"},{"location":"querying_data/crud/#read","text":"Retrieve a single object from a resource or list all objects that exist (paginated).","title":"Read"},{"location":"querying_data/crud/#retrieve-single-object","text":"To retrieve a single object, make a GET request to the resource with the ID of the object as the last path parameter. Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c headers = {} response = requests . request ( GET , url , headers = headers ) print ( response . text ) javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( GET , https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c req , _ := http . NewRequest ( GET , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 HTTP/ 1.1 200 OK { _metadata : { created : 1552326051 , creator : anonymous , creator_type : anonymous }, age : 7 , breed : German Shephard , id : 5c869da3a7748bb224833f5c , name : Max }","title":"Retrieve single object"},{"location":"querying_data/crud/#list-objects","text":"To retrieve a paginated list of objects for this resource, make a GET request to the resource. Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/api/dogs Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs headers = {} response = requests . request ( GET , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( GET , https://pet-demo.machinable.io/api/dogs ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs req , _ := http . NewRequest ( GET , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 HTTP/ 1.1 200 OK { count : 2 , items : [ { _metadata : { created : 1552323811 , creator : anonymous , creator_type : anonymous }, age : 2 , breed : French Bulldog , id : 5c8694e3a7748bb224833f51 , name : Murphy }, { _metadata : { created : 1552326051 , creator : anonymous , creator_type : anonymous }, age : 7 , breed : German Shephard , id : 5c869da3a7748bb224833f5c , name : Max } ], links : { self : https://pet-demo.machinable.io/api/dogs?_limit=10 _offset=0 } } Notice the resource objects are returned as a list in the items key. A maximum of 10 objects will be returned by default. See Pagination for more information regarding the page limit as well as the other keys in the root of the response JSON.","title":"List objects"},{"location":"querying_data/crud/#update","text":"Update a single object's values. Bash 1 2 3 4 5 6 curl -X PUT \\ https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c \\ -d { age : 9, name : Maximilian } Python 1 2 3 4 5 6 7 8 9 10 import requests url = https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c payload = { \\n \\ age \\ : 9, \\n \\ name \\ : \\ Maximilian \\ \\n } headers = {} response = requests . request ( PUT , url , data = payload , headers = headers ) print ( response . text ) javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = {\\n \\ age\\ : 9,\\n \\ name\\ : \\ Maximilian\\ \\n} ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( PUT , https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import ( fmt strings net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c payload := strings . NewReader ( {\\n \\ age\\ : 9,\\n \\ name\\ : \\ Maximilian\\ \\n} ) req , _ := http . NewRequest ( PUT , url , payload ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 HTTP/ 1.1 200 OK { _metadata : { created : 1552326051 , creator : anonymous , creator_type : anonymous }, age : 9 , breed : German Shephard , id : 5c869da3a7748bb224833f5c , name : Maximilian }","title":"Update"},{"location":"querying_data/crud/#delete","text":"Permanently remove an object. Bash 1 2 curl -X DELETE \\ https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c headers = {} response = requests . request ( DELETE , url , headers = headers ) print ( response . text ) javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( DELETE , https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c req , _ := http . NewRequest ( DELETE , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 HTTP/ 1.1 204 No Content","title":"Delete"},{"location":"querying_data/errors/","text":"API Resources and Collections may return the following error status codes. Status Code Description 400 Bad Request A field is missing or is of the wrong data type based on the JSON Schema for the Resource 401 Unauthorized Missing or invalid authorization header 403 Forbidden The requester is not allowed to access the resource 404 Not Found The resource or object does not exist 500 Internal Server Error An unknown error occurred, try again later","title":"Error Codes"},{"location":"querying_data/filtering/","text":"Data stored in API Resource endpoints can be filtered, or searched, by adding a query parameter to the request URL with the field set to the value you want to search on. Limitations of Filtering Filters can only currently support exact matches . For example, if we want to search the dogs collection in the Pet Demo project for dogs that are of the breed \"German Shephard\", we would add the following to the request URL: 1 2 3 4 5 # filter breed = German Shephard # full URL https://pet-demo.machinable.io/api/dogs?breed = German%20Shephard Using the URL above with the filter on breed=German Shephard , the full request and response will look like the following: Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/api/dogs?breed=German%20Shephard Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs?breed=German%20Shephard headers = {} response = requests . request ( GET , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( GET , https://pet-demo.machinable.io/api/dogs?breed=German%20Shephard ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs?breed=German%20Shephard req , _ := http . NewRequest ( GET , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 HTTP/ 1.1 200 OK { count : 1 , items : [ { _metadata : { created : 1552333754 , creator : anonymous , creator_type : anonymous }, age : 9 , breed : German Shephard , id : 5c86d3dda7748bb224833f68 , name : Maximilian } ], links : { self : https://pet-demo.machinable.io/api/dogs?_limit=10 _offset=0 breed=German Shephard } } The response count is the total count of results based on the filter. Pagination will be based on the filter.","title":"Filtering"},{"location":"querying_data/pagination/","text":"When making calls to Machinable API Resources, there may be a ton of results to return, depending on your use case. In order to keep response sizes small and more manageable, results are returned as a paginated list. Take a look at the response of the following list operation to the dogs API Resource in our Pet Demo project: Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/api/dogs Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs headers = {} response = requests . request ( GET , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( GET , https://pet-demo.machinable.io/api/dogs ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs req , _ := http . NewRequest ( GET , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 HTTP/ 1.1 200 OK { count : 2 , items : [ { _metadata : { created : 1552323811 , creator : anonymous , creator_type : anonymous }, age : 2 , breed : French Bulldog , id : 5c8694e3a7748bb224833f51 , name : Murphy }, { _metadata : { created : 1552326051 , creator : anonymous , creator_type : anonymous }, age : 7 , breed : German Shephard , id : 5c869da3a7748bb224833f5c , name : Max } ], links : { self : https://pet-demo.machinable.io/api/dogs?_limit=10 _offset=0 } } As you can see, there are 3 keys at the root of the JSON response; count , links , and items . count is the total count of results for the query. Based on our request, we now know there are a total of 2 dogs in the dogs resource because we are not filtering the data in any way. links provides context to what URLs we can request to traverse forward or backward through the paginated results. items contains each object returned for the page we are requesting . The page we are requesting is determined by the query parameters _limit and _offset . Limit _limit is a query parameter that can be used to specify how many results you would like to see in a single response payload. If we take a look at our sample request above, we'll see that we are not specifying a limit, so Machinable will default the page size to 10. If we specify _limit of 1 , we will only get the first result of the dogs objects: Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/api/dogs?_limit=1 Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs?_limit=1 headers = {} response = requests . request ( GET , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( GET , https://pet-demo.machinable.io/api/dogs?_limit=1 ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs?_limit=1 req , _ := http . NewRequest ( GET , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 HTTP/ 1.1 200 OK { count : 2 , items : [ { _metadata : { created : 1552323811 , creator : anonymous , creator_type : anonymous }, age : 2 , breed : French Bulldog , id : 5c8694e3a7748bb224833f51 , name : Murphy } ], links : { self : https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=0 , next : https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=1 } } Info The _limit query parameter is a reserved field that cannot be used in API Resource data fields. The _limit query parameter has the following constraints: Maximum: 100 Minimum: 1 Default: 10 Offset _offset is a query parameter that can be used to specify how many results to skip before the response payload is built and returned. If we take a look at our sample request above, we'll see that we are not specifying an offset, so Machinable will default the offset to 0, giving us the first page of the results. If we continue to build off of the request in our example and provide an _offset of 1 with a _limit of 1 , we will get the second \"page\" of results. Since there are only 2 dogs in the resource, the second page will be the last page: Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=1 Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=1 headers = {} response = requests . request ( GET , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( GET , https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=1 ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=1 req , _ := http . NewRequest ( GET , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 HTTP/ 1.1 200 OK { count : 2 , items : [ { _metadata : { created : 1552339933 , creator : anonymous , creator_type : anonymous }, age : 7 , breed : German Shephard , id : 5c86d3dda7748bb224833f68 , name : Max } ], links : { self : https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=1 , prev : https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=0 } } Info The _offset query parameter is a reserved field that cannot be used in API Resource data fields. The _offset query parameter has the following constraints: Minimum: 0 Default: 0 With the use of _limit and _offset we can traverse the entire list of results without having to return all of them in a single request. Links The links field provides contextual URLs for the current ( self ), next , and prev (previous) page of results. This can be helpful when creating a paginated table of data so the table does not have to keep track of which page it is on (limit and offset), only what the next and prev URLs are, which will be returned with each list request.","title":"Pagination"},{"location":"querying_data/pagination/#limit","text":"_limit is a query parameter that can be used to specify how many results you would like to see in a single response payload. If we take a look at our sample request above, we'll see that we are not specifying a limit, so Machinable will default the page size to 10. If we specify _limit of 1 , we will only get the first result of the dogs objects: Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/api/dogs?_limit=1 Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs?_limit=1 headers = {} response = requests . request ( GET , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( GET , https://pet-demo.machinable.io/api/dogs?_limit=1 ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs?_limit=1 req , _ := http . NewRequest ( GET , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 HTTP/ 1.1 200 OK { count : 2 , items : [ { _metadata : { created : 1552323811 , creator : anonymous , creator_type : anonymous }, age : 2 , breed : French Bulldog , id : 5c8694e3a7748bb224833f51 , name : Murphy } ], links : { self : https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=0 , next : https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=1 } } Info The _limit query parameter is a reserved field that cannot be used in API Resource data fields. The _limit query parameter has the following constraints: Maximum: 100 Minimum: 1 Default: 10","title":"Limit"},{"location":"querying_data/pagination/#offset","text":"_offset is a query parameter that can be used to specify how many results to skip before the response payload is built and returned. If we take a look at our sample request above, we'll see that we are not specifying an offset, so Machinable will default the offset to 0, giving us the first page of the results. If we continue to build off of the request in our example and provide an _offset of 1 with a _limit of 1 , we will get the second \"page\" of results. Since there are only 2 dogs in the resource, the second page will be the last page: Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=1 Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=1 headers = {} response = requests . request ( GET , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( GET , https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=1 ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=1 req , _ := http . NewRequest ( GET , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 HTTP/ 1.1 200 OK { count : 2 , items : [ { _metadata : { created : 1552339933 , creator : anonymous , creator_type : anonymous }, age : 7 , breed : German Shephard , id : 5c86d3dda7748bb224833f68 , name : Max } ], links : { self : https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=1 , prev : https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=0 } } Info The _offset query parameter is a reserved field that cannot be used in API Resource data fields. The _offset query parameter has the following constraints: Minimum: 0 Default: 0 With the use of _limit and _offset we can traverse the entire list of results without having to return all of them in a single request.","title":"Offset"},{"location":"querying_data/pagination/#links","text":"The links field provides contextual URLs for the current ( self ), next , and prev (previous) page of results. This can be helpful when creating a paginated table of data so the table does not have to keep track of which page it is on (limit and offset), only what the next and prev URLs are, which will be returned with each list request.","title":"Links"},{"location":"querying_data/sorting/","text":"Query results from API Resources can be sorted based on a field in ascending or descending order. To sort query results, provide the _sort query parameter set to the field to sort on. Prefix the field with a dash ( - ) to sort in descending order. Note The _sort query parameter is a reserved field that cannot be used in API Resource data fields. Ascending Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/api/dogs?_sort = age Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs?_sort=age headers = {} response = requests . request ( GET , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( GET , https://pet-demo.machinable.io/api/dogs?_sort=age ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs?_sort=age req , _ := http . NewRequest ( GET , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 HTTP/ 1.1 200 OK { count : 2 , items : [ { _metadata : { created : 1552323811 , creator : anonymous , creator_type : anonymous }, age : 2 , breed : French Bulldog , id : 5c8694e3a7748bb224833f51 , name : Murphy }, { _metadata : { created : 1552333754 , creator : anonymous , creator_type : anonymous }, age : 9 , breed : German Shephard , id : 5c86d3dda7748bb224833f68 , name : Maximilian } ], links : { self : https://pet-demo.machinable.io/api/dogs?_limit=10 _offset=0 _sort=age } } Descending Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/api/dogs?_sort = -age Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs?_sort=-age headers = {} response = requests . request ( GET , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( GET , https://pet-demo.machinable.io/api/dogs?_sort=-age ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs?_sort=-age req , _ := http . NewRequest ( GET , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 HTTP/ 1.1 200 OK { count : 2 , items : [ { _metadata : { created : 1552333754 , creator : anonymous , creator_type : anonymous }, age : 9 , breed : German Shephard , id : 5c86d3dda7748bb224833f68 , name : Maximilian }, { _metadata : { created : 1552323811 , creator : anonymous , creator_type : anonymous }, age : 2 , breed : French Bulldog , id : 5c8694e3a7748bb224833f51 , name : Murphy } ], links : { self : https://pet-demo.machinable.io/api/dogs?_limit=10 _offset=0 _sort=-age } }","title":"Sorting"},{"location":"querying_data/sorting/#ascending","text":"Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/api/dogs?_sort = age Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs?_sort=age headers = {} response = requests . request ( GET , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( GET , https://pet-demo.machinable.io/api/dogs?_sort=age ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs?_sort=age req , _ := http . NewRequest ( GET , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 HTTP/ 1.1 200 OK { count : 2 , items : [ { _metadata : { created : 1552323811 , creator : anonymous , creator_type : anonymous }, age : 2 , breed : French Bulldog , id : 5c8694e3a7748bb224833f51 , name : Murphy }, { _metadata : { created : 1552333754 , creator : anonymous , creator_type : anonymous }, age : 9 , breed : German Shephard , id : 5c86d3dda7748bb224833f68 , name : Maximilian } ], links : { self : https://pet-demo.machinable.io/api/dogs?_limit=10 _offset=0 _sort=age } }","title":"Ascending"},{"location":"querying_data/sorting/#descending","text":"Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/api/dogs?_sort = -age Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs?_sort=-age headers = {} response = requests . request ( GET , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( GET , https://pet-demo.machinable.io/api/dogs?_sort=-age ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs?_sort=-age req , _ := http . NewRequest ( GET , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 HTTP/ 1.1 200 OK { count : 2 , items : [ { _metadata : { created : 1552333754 , creator : anonymous , creator_type : anonymous }, age : 9 , breed : German Shephard , id : 5c86d3dda7748bb224833f68 , name : Maximilian }, { _metadata : { created : 1552323811 , creator : anonymous , creator_type : anonymous }, age : 2 , breed : French Bulldog , id : 5c8694e3a7748bb224833f51 , name : Murphy } ], links : { self : https://pet-demo.machinable.io/api/dogs?_limit=10 _offset=0 _sort=-age } }","title":"Descending"},{"location":"querying_data/queries/create/","text":"Bash 1 2 3 $ curl -X POST \\ https://pet-demo.machinable.io/api/dogs \\ -d { name : Murphy , age :2, breed : French Bulldog } Python 1 2 3 4 5 6 7 8 9 10 import requests url = https://pet-demo.machinable.io/api/dogs payload = { \\ name \\ : \\ Murphy \\ , \\ age \\ :2, \\ breed \\ : \\ French Bulldog \\ } headers = {} response = requests . request ( POST , url , data = payload , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = {\\ name\\ :\\ Murphy\\ , \\ age\\ :2, \\ breed\\ : \\ French Bulldog\\ } ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( POST , https://pet-demo.machinable.io/api/dogs ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import ( fmt strings net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs payload := strings . NewReader ( {\\ name\\ :\\ Murphy\\ , \\ age\\ :2, \\ breed\\ : \\ French Bulldog\\ } ) req , _ := http . NewRequest ( POST , url , payload ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 HTTP/ 1.1 201 Created { _metadata : { created : 1552323811 , creator : anonymous , creator_type : anonymous }, age : 2 , breed : French Bulldog , id : 5c8694e3a7748bb224833f51 , name : Murphy }","title":"Create"},{"location":"querying_data/queries/delete/","text":"Bash 1 2 curl -X DELETE \\ https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c headers = {} response = requests . request ( DELETE , url , headers = headers ) print ( response . text ) javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( DELETE , https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c req , _ := http . NewRequest ( DELETE , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 HTTP/ 1.1 204 No Content","title":"Delete"},{"location":"querying_data/queries/get/","text":"Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c headers = {} response = requests . request ( GET , url , headers = headers ) print ( response . text ) javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( GET , https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c req , _ := http . NewRequest ( GET , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 HTTP/ 1.1 200 OK { _metadata : { created : 1552326051 , creator : anonymous , creator_type : anonymous }, age : 7 , breed : German Shephard , id : 5c869da3a7748bb224833f5c , name : Max }","title":"Get"},{"location":"querying_data/queries/list.1/","text":"Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/api/dogs?_limit=1 Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs?_limit=1 headers = {} response = requests . request ( GET , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( GET , https://pet-demo.machinable.io/api/dogs?_limit=1 ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs?_limit=1 req , _ := http . NewRequest ( GET , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 HTTP/ 1.1 200 OK { count : 2 , items : [ { _metadata : { created : 1552323811 , creator : anonymous , creator_type : anonymous }, age : 2 , breed : French Bulldog , id : 5c8694e3a7748bb224833f51 , name : Murphy } ], links : { self : https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=0 , next : https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=1 } }","title":"List.1"},{"location":"querying_data/queries/list.2/","text":"Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=1 Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=1 headers = {} response = requests . request ( GET , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( GET , https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=1 ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=1 req , _ := http . NewRequest ( GET , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 HTTP/ 1.1 200 OK { count : 2 , items : [ { _metadata : { created : 1552339933 , creator : anonymous , creator_type : anonymous }, age : 7 , breed : German Shephard , id : 5c86d3dda7748bb224833f68 , name : Max } ], links : { self : https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=1 , prev : https://pet-demo.machinable.io/api/dogs?_limit=1 _offset=0 } }","title":"List.2"},{"location":"querying_data/queries/list.filter/","text":"Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/api/dogs?breed=German%20Shephard Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs?breed=German%20Shephard headers = {} response = requests . request ( GET , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( GET , https://pet-demo.machinable.io/api/dogs?breed=German%20Shephard ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs?breed=German%20Shephard req , _ := http . NewRequest ( GET , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 HTTP/ 1.1 200 OK { count : 1 , items : [ { _metadata : { created : 1552333754 , creator : anonymous , creator_type : anonymous }, age : 9 , breed : German Shephard , id : 5c86d3dda7748bb224833f68 , name : Maximilian } ], links : { self : https://pet-demo.machinable.io/api/dogs?_limit=10 _offset=0 breed=German Shephard } }","title":"List.filter"},{"location":"querying_data/queries/list/","text":"Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/api/dogs Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs headers = {} response = requests . request ( GET , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( GET , https://pet-demo.machinable.io/api/dogs ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs req , _ := http . NewRequest ( GET , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 HTTP/ 1.1 200 OK { count : 2 , items : [ { _metadata : { created : 1552323811 , creator : anonymous , creator_type : anonymous }, age : 2 , breed : French Bulldog , id : 5c8694e3a7748bb224833f51 , name : Murphy }, { _metadata : { created : 1552326051 , creator : anonymous , creator_type : anonymous }, age : 7 , breed : German Shephard , id : 5c869da3a7748bb224833f5c , name : Max } ], links : { self : https://pet-demo.machinable.io/api/dogs?_limit=10 _offset=0 } }","title":"List"},{"location":"querying_data/queries/list.sort.asc/","text":"Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/api/dogs?_sort = age Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs?_sort=age headers = {} response = requests . request ( GET , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( GET , https://pet-demo.machinable.io/api/dogs?_sort=age ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs?_sort=age req , _ := http . NewRequest ( GET , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 HTTP/ 1.1 200 OK { count : 2 , items : [ { _metadata : { created : 1552323811 , creator : anonymous , creator_type : anonymous }, age : 2 , breed : French Bulldog , id : 5c8694e3a7748bb224833f51 , name : Murphy }, { _metadata : { created : 1552333754 , creator : anonymous , creator_type : anonymous }, age : 9 , breed : German Shephard , id : 5c86d3dda7748bb224833f68 , name : Maximilian } ], links : { self : https://pet-demo.machinable.io/api/dogs?_limit=10 _offset=0 _sort=age } }","title":"List.sort.asc"},{"location":"querying_data/queries/list.sort.desc/","text":"Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/api/dogs?_sort = -age Python 1 2 3 4 5 6 7 8 9 import requests url = https://pet-demo.machinable.io/api/dogs?_sort=-age headers = {} response = requests . request ( GET , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( GET , https://pet-demo.machinable.io/api/dogs?_sort=-age ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs?_sort=-age req , _ := http . NewRequest ( GET , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 HTTP/ 1.1 200 OK { count : 2 , items : [ { _metadata : { created : 1552333754 , creator : anonymous , creator_type : anonymous }, age : 9 , breed : German Shephard , id : 5c86d3dda7748bb224833f68 , name : Maximilian }, { _metadata : { created : 1552323811 , creator : anonymous , creator_type : anonymous }, age : 2 , breed : French Bulldog , id : 5c8694e3a7748bb224833f51 , name : Murphy } ], links : { self : https://pet-demo.machinable.io/api/dogs?_limit=10 _offset=0 _sort=-age } }","title":"List.sort.desc"},{"location":"querying_data/queries/refresh/","text":"Bash 1 2 3 curl -X POST \\ https://pet-demo.machinable.io/sessions/refresh/ \\ -H authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTI1ODExMTksInNlc3Npb25faWQiOiI1Yzg2OGQ3ZmE3NzQ4YmIyMjQ4MzNmNGMiLCJ1c2VyX2lkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIn0.wWyb-nNff3RBw73D1hqN9k8U8_pKMHWGShMwA9YvSAc Python 1 2 3 4 5 6 7 8 9 10 11 import requests url = https://pet-demo.machinable.io/sessions/refresh/ headers = { authorization : Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTI1ODExMTksInNlc3Npb25faWQiOiI1Yzg2OGQ3ZmE3NzQ4YmIyMjQ4MzNmNGMiLCJ1c2VyX2lkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIn0.wWyb-nNff3RBw73D1hqN9k8U8_pKMHWGShMwA9YvSAc } response = requests . request ( POST , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var data = null ; var xhr = new XMLHttpRequest (); xhr . withCredentials = true ; xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( POST , https://pet-demo.machinable.io/sessions/refresh/ ); xhr . setRequestHeader ( authorization , Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTI1ODExMTksInNlc3Npb25faWQiOiI1Yzg2OGQ3ZmE3NzQ4YmIyMjQ4MzNmNGMiLCJ1c2VyX2lkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIn0.wWyb-nNff3RBw73D1hqN9k8U8_pKMHWGShMwA9YvSAc ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main import ( fmt net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/sessions/refresh/ req , _ := http . NewRequest ( POST , url , nil ) req . Header . Add ( authorization , Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTI1ODExMTksInNlc3Npb25faWQiOiI1Yzg2OGQ3ZmE3NzQ4YmIyMjQ4MzNmNGMiLCJ1c2VyX2lkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIn0.wWyb-nNff3RBw73D1hqN9k8U8_pKMHWGShMwA9YvSAc ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 HTTP/ 1.1 200 OK { access_token : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTIzMjI4MTksInByb2plY3RzIjp7InBldC1kZW1vIjp0cnVlfSwidXNlciI6eyJhY3RpdmUiOnRydWUsImlkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIiwibmFtZSI6InRlc3RVc2VyIiwicmVhZCI6dHJ1ZSwidHlwZSI6InByb2plY3QiLCJ3cml0ZSI6dHJ1ZX19.93H4H3FyPGrzOGb3WHRO7RLUGezpYxbVki7oGqdyA6E }","title":"Refresh"},{"location":"querying_data/queries/update/","text":"Bash 1 2 3 4 5 6 curl -X PUT \\ https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c \\ -d { age : 9, name : Maximilian } Python 1 2 3 4 5 6 7 8 9 10 import requests url = https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c payload = { \\n \\ age \\ : 9, \\n \\ name \\ : \\ Maximilian \\ \\n } headers = {} response = requests . request ( PUT , url , data = payload , headers = headers ) print ( response . text ) javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = {\\n \\ age\\ : 9,\\n \\ name\\ : \\ Maximilian\\ \\n} ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( readystatechange , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( PUT , https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import ( fmt strings net/http io/ioutil ) func main () { url := https://pet-demo.machinable.io/api/dogs/5c869da3a7748bb224833f5c payload := strings . NewReader ( {\\n \\ age\\ : 9,\\n \\ name\\ : \\ Maximilian\\ \\n} ) req , _ := http . NewRequest ( PUT , url , payload ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 HTTP/ 1.1 200 OK { _metadata : { created : 1552326051 , creator : anonymous , creator_type : anonymous }, age : 9 , breed : German Shephard , id : 5c869da3a7748bb224833f5c , name : Maximilian }","title":"Update"},{"location":"reference/json_schema/","text":"JSON Schema Machinable API Resource properties are defined with JSON Schema. This section provides helpful information and quick links on the topic of JSON Schema. JSON Schema is a vocabulary that allows you to annotate and validate JSON documents. Understanding JSON Schema is a great reference for those that want to understand the basics of JSON Schema, without diving into the technical specification. For more information about the JSON Schema specification, refer to https://json-schema.org . Example Schemas These examples are meant to give you a high level idea of how to structure your data types in Machinable. Dog 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { age : { description : Age, in human years, of the dog. , type : integer }, breed : { description : The breed of the dog. , type : string }, name : { description : The name of the dog. , type : string } } Dog sample data: 1 2 3 4 5 { age : 2 , breed : French Bulldog , name : Murphy } Person 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 { firstName : { type : string , description : The person s first name. }, lastName : { type : string , description : The person s last name. }, age : { description : Age in years which must be equal to or greater than zero. , type : integer , minimum : 0 }, birthDate : { description : The date of this person s birth, represented by a RFC3339 formated date-time string , format : date-time , type : string }, friends : { description : A list of this person s friends , items : { type : string }, type : array }, profession : { description : The profession of this person. What they do for a career or their lifestyle. , type : object , properties : { title : { type : string }, years : { type : number , description : The number of years this person has spent with this profession }, responsibilites : { description : A list of this profession s responsibilities , items : { type : string }, type : array } } } } Person sample data: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { firstName : Jonathan , lastName : Gilmore , age : 29 , birthDate : 1989-07-20T04:00:00Z , friends : [ Renee Scott , Mrs. Brenda Harris , Charles Miller , Marc Webb ], profession : { title : Lumberjack , years : 10.5 , responsibilites : [ North American workers in the logging industry who perform the initial harvesting and transport of trees for ultimate processing into forest products. ] } }","title":"JSON Schema"},{"location":"reference/json_schema/#json-schema","text":"Machinable API Resource properties are defined with JSON Schema. This section provides helpful information and quick links on the topic of JSON Schema. JSON Schema is a vocabulary that allows you to annotate and validate JSON documents. Understanding JSON Schema is a great reference for those that want to understand the basics of JSON Schema, without diving into the technical specification. For more information about the JSON Schema specification, refer to https://json-schema.org .","title":"JSON Schema"},{"location":"reference/json_schema/#example-schemas","text":"These examples are meant to give you a high level idea of how to structure your data types in Machinable.","title":"Example Schemas"},{"location":"reference/json_schema/#dog","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 { age : { description : Age, in human years, of the dog. , type : integer }, breed : { description : The breed of the dog. , type : string }, name : { description : The name of the dog. , type : string } } Dog sample data: 1 2 3 4 5 { age : 2 , breed : French Bulldog , name : Murphy }","title":"Dog"},{"location":"reference/json_schema/#person","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 { firstName : { type : string , description : The person s first name. }, lastName : { type : string , description : The person s last name. }, age : { description : Age in years which must be equal to or greater than zero. , type : integer , minimum : 0 }, birthDate : { description : The date of this person s birth, represented by a RFC3339 formated date-time string , format : date-time , type : string }, friends : { description : A list of this person s friends , items : { type : string }, type : array }, profession : { description : The profession of this person. What they do for a career or their lifestyle. , type : object , properties : { title : { type : string }, years : { type : number , description : The number of years this person has spent with this profession }, responsibilites : { description : A list of this profession s responsibilities , items : { type : string }, type : array } } } } Person sample data: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { firstName : Jonathan , lastName : Gilmore , age : 29 , birthDate : 1989-07-20T04:00:00Z , friends : [ Renee Scott , Mrs. Brenda Harris , Charles Miller , Marc Webb ], profession : { title : Lumberjack , years : 10.5 , responsibilites : [ North American workers in the logging industry who perform the initial harvesting and transport of trees for ultimate processing into forest products. ] } }","title":"Person"},{"location":"reference/sample_projects/","text":"Notes A simple note taking application using Markdown. This application demonstrates basic user registration/login as well as API resource HTTP requests to manage notes on top of a Machinable project. https://www.machinable.io/notes","title":"Sample Projects"},{"location":"reference/sample_projects/#notes","text":"A simple note taking application using Markdown. This application demonstrates basic user registration/login as well as API resource HTTP requests to manage notes on top of a Machinable project. https://www.machinable.io/notes","title":"Notes"}]}
{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Machinable! \u00b6 Machinable gives developers the ability to create API Resources and Collections to store data in a structured, validated, RESTful way without having to write any backend code. \u00b6 Features \u00b6 API Resources \u00b6 API Resources are defined endpoints that store structured data which is validated on creation based on the JSON Schema that describes your application's data. Collections \u00b6 Collections are lists of unstructured data. Store any JSON object in your collections without having to rely on data validation. User/API Key Access \u00b6 Create API Keys to manage your project data and allow users to register to your project. Users then have access to API Resource and Collection data based on authorization policies that you configure. Goal \u00b6 The goal of Machinable is to provide developers an abstraction to their project's CRUD HTTP APIs. This let's you focus on the important parts of your project; User experience and business logic. With Machinable's combination of CRUD interfaces , Webhooks (TODO), and Websockets (TODO), developers can quickly develop prototypes or even full scale production applications. See our list of open source sample applications built on Machinable.","title":"Overview"},{"location":"#welcome-to-machinable","text":"Machinable gives developers the ability to create API Resources and Collections to store data in a structured, validated, RESTful way without having to write any backend code.","title":"Welcome to Machinable!"},{"location":"#features","text":"","title":"Features"},{"location":"#api-resources","text":"API Resources are defined endpoints that store structured data which is validated on creation based on the JSON Schema that describes your application's data.","title":"API Resources"},{"location":"#collections","text":"Collections are lists of unstructured data. Store any JSON object in your collections without having to rely on data validation.","title":"Collections"},{"location":"#userapi-key-access","text":"Create API Keys to manage your project data and allow users to register to your project. Users then have access to API Resource and Collection data based on authorization policies that you configure.","title":"User/API Key Access"},{"location":"#goal","text":"The goal of Machinable is to provide developers an abstraction to their project's CRUD HTTP APIs. This let's you focus on the important parts of your project; User experience and business logic. With Machinable's combination of CRUD interfaces , Webhooks (TODO), and Websockets (TODO), developers can quickly develop prototypes or even full scale production applications. See our list of open source sample applications built on Machinable.","title":"Goal"},{"location":"about/","text":"Machinable is a project maintained by Nick Sjostrom.","title":"About"},{"location":"getting_started/","text":"Register \u00b6 Navigate to https://machinable.io and register for an account. This will require a valid email address. \u00b6 Confirm your email by following the link in your inbox. You will then be able to login to Machinable and start managing your projects! Create A Project \u00b6 After logging in for the first time you will see a fairly empty screen which invites you to create a new project. Click the 'Create A Project' button to get started. \u00b6 Provide the necessary information for your project: Project Icon Select from multiple icons. This can help identify your project in the list. Name The short, but descriptive, name of your project. Slug This is the subdomain that will be given to your project in the form of https://{project_slug}.machinable.io . Description A longer description of your project. What are you using this project for? Are there any relevant links that this project should reference? Etc. Authentication Required This specifies if User/API Key authentication will be required to access the API Resource and Collection data stored for this project. If this is disabled, anyone with your project links can access the data. This can be changed at any time . Once you have filled out the form, click 'Create'. Your project is now ready to use! What's Next? \u00b6 Create an API Resource Manage Collections Create and query some data Create an application that uses your Machinable project","title":"Getting Started"},{"location":"getting_started/#register","text":"Navigate to https://machinable.io and register for an account. This will require a valid email address.","title":"Register"},{"location":"getting_started/#create-a-project","text":"After logging in for the first time you will see a fairly empty screen which invites you to create a new project. Click the 'Create A Project' button to get started.","title":"Create A Project"},{"location":"getting_started/#whats-next","text":"Create an API Resource Manage Collections Create and query some data Create an application that uses your Machinable project","title":"What's Next?"},{"location":"release_notes/","text":"API Changelog \u00b6 0.8.0 \u00b6 Support ReCaptcha on register Misc. additions to slug blacklist UI Changelog \u00b6 0.6.1 \u00b6 Add ReCaptcha on register page Fix docker build Dummy user settings screens Re-style home/projects page","title":"Release Notes"},{"location":"release_notes/#api-changelog","text":"","title":"API Changelog"},{"location":"release_notes/#080","text":"Support ReCaptcha on register Misc. additions to slug blacklist","title":"0.8.0"},{"location":"release_notes/#ui-changelog","text":"","title":"UI Changelog"},{"location":"release_notes/#061","text":"Add ReCaptcha on register page Fix docker build Dummy user settings screens Re-style home/projects page","title":"0.6.1"},{"location":"account/apikeys/","text":"","title":"API Keys"},{"location":"account/billing/","text":"","title":"Billing & Plans"},{"location":"account/contact/","text":"","title":"Contact"},{"location":"account/password/","text":"","title":"Password Reset"},{"location":"account/security/","text":"","title":"Security"},{"location":"account/support/","text":"","title":"Support"},{"location":"api/introduction/","text":"","title":"Machinable API"},{"location":"projects/access/","text":"Access \u00b6 Users \u00b6 API Keys \u00b6","title":"Access"},{"location":"projects/access/#access","text":"","title":"Access"},{"location":"projects/access/#users","text":"","title":"Users"},{"location":"projects/access/#api-keys","text":"","title":"API Keys"},{"location":"projects/collections/","text":"Collections \u00b6 Manage Collections \u00b6 Querying Data \u00b6 Configure Access \u00b6","title":"Collections"},{"location":"projects/collections/#collections","text":"","title":"Collections"},{"location":"projects/collections/#manage-collections","text":"","title":"Manage Collections"},{"location":"projects/collections/#querying-data","text":"","title":"Querying Data"},{"location":"projects/collections/#configure-access","text":"","title":"Configure Access"},{"location":"projects/resources/","text":"API Resources \u00b6 Manage Resources \u00b6 Querying Data \u00b6 Configure Access \u00b6","title":"API Resources"},{"location":"projects/resources/#api-resources","text":"","title":"API Resources"},{"location":"projects/resources/#manage-resources","text":"","title":"Manage Resources"},{"location":"projects/resources/#querying-data","text":"","title":"Querying Data"},{"location":"projects/resources/#configure-access","text":"","title":"Configure Access"},{"location":"projects/security/","text":"Security \u00b6 Logs \u00b6 Sessions \u00b6","title":"Security"},{"location":"projects/security/#security","text":"","title":"Security"},{"location":"projects/security/#logs","text":"","title":"Logs"},{"location":"projects/security/#sessions","text":"","title":"Sessions"},{"location":"projects/settings/","text":"","title":"Settings"},{"location":"querying_data/crud/","text":"Machinable's main feature is the ability to perform CRUD (Create, Read, Update, Delete) operations on your project's API Resource and Collection endpoints. API Resources and Collections use the same syntax when performing CRUD operations. The only difference between the two is API Resources will return 400 Bad Request when creating an object that does not match the defined JSON Schema. Note See API Resources for more information about data validation with JSON Schema. All examples will be using the Pet Demo project, which has the following project URL: 1 https://pet-demo.machinable.io Authentication \u00b6 Note If your project authentication policy is disabled, you do not need to provide an Authorization header in your requests. The examples on this page do not make use of an Authorization header. Depending on how you are accessing your project's data, you may need to authenticate your requests. API Keys \u00b6 To make authenticated requests with an API Key , add the Authorization header with the apikey text to each request: 1 Authorization: apikey { api_key_string } Users \u00b6 User authenticated requests require a bit more work. First, the user will need to acquire a session. To do that, make an HTTP Basic authentication request to your project's /sessions endpoint. This will return an access_token and a refresh_token in the form of JSON Web Tokens : Bash 1 2 3 4 5 6 7 8 # base64 encode username|password to make HTTP Basic authn request $ echo \"testUser:hunter2\" | base64 dGVzdFVzZXI6aHVudGVyMgo = # POST credentials to /sessions/ endpoint to recieve access token $ curl -X POST \\ https://pet-demo.machinable.io/sessions/ \\ -H 'authorization: Basic dGVzdFVzZXI6aHVudGVyMg==' Python 1 2 3 4 5 6 7 8 9 10 11 import requests url = \"https://pet-demo.machinable.io/sessions/\" headers = { 'authorization' : \"Basic dGVzdFVzZXI6aHVudGVyMg==\" } response = requests . request ( \"POST\" , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var data = null ; var xhr = new XMLHttpRequest (); xhr . withCredentials = true ; xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"POST\" , \"https://pet-demo.machinable.io/sessions/\" ); xhr . setRequestHeader ( \"authorization\" , \"Basic dGVzdFVzZXI6aHVudGVyMg==\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main import ( \"fmt\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/sessions/\" req , _ := http . NewRequest ( \"POST\" , url , nil ) req . Header . Add ( \"authorization\" , \"Basic dGVzdFVzZXI6aHVudGVyMg==\" ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 { \"access_token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTIzMjI4MTksInByb2plY3RzIjp7InBldC1kZW1vIjp0cnVlfSwidXNlciI6eyJhY3RpdmUiOnRydWUsImlkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIiwibmFtZSI6InRlc3RVc2VyIiwicmVhZCI6dHJ1ZSwidHlwZSI6InByb2plY3QiLCJ3cml0ZSI6dHJ1ZX19.93H4H3FyPGrzOGb3WHRO7RLUGezpYxbVki7oGqdyA6E\" , \"message\" : \"Successfully logged in\" , \"refresh_token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTI1ODExMTksInNlc3Npb25faWQiOiI1Yzg2OGQ3ZmE3NzQ4YmIyMjQ4MzNmNGMiLCJ1c2VyX2lkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIn0.wWyb-nNff3RBw73D1hqN9k8U8_pKMHWGShMwA9YvSAc\" , \"session_id\" : \"5c868d7fa7748bb224833f4c\" } Once the user has a session, authenticated requests can be made by adding the Authorization header with the bearer text and access_token to each request: 1 Authorization: bearer { access_token } Info Access tokens have a limited lifetime of 5 minutes. They then need to be exchanged for a new Access token using the refresh token. Refer to Project Users for more information about refreshing an access token. Create \u00b6 Create and store a new object in a specific Collection or API Resource. Note These examples are managing data within a Collection called dogs ( /collections/dogs ). These requests could also manage data within an API Resource called dogs at /api/dogs , given the correct JSON schema is defined. Bash 1 2 3 $ curl -X POST \\ https://pet-demo.machinable.io/collections/dogs \\ -d '{\"name\":\"Murphy\", \"age\":2, \"breed\": \"French Bulldog\"}' Python 1 2 3 4 5 6 7 8 9 10 11 12 import requests url = \"https://pet-demo.machinable.io/collections/dogs\" payload = \"{ \\\" name \\\" : \\\" Murphy \\\" , \\\" age \\\" :2, \\\" breed \\\" : \\\" French Bulldog \\\" }\" headers = { 'authorization' : \"Basic dGVzdFVzZXI6aHVudGVyMg==\" } response = requests . request ( \"POST\" , url , data = payload , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = \"{\\\"name\\\":\\\"Murphy\\\", \\\"age\\\":2, \\\"breed\\\": \\\"French Bulldog\\\"}\" ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"POST\" , \"https://pet-demo.machinable.io/collections/dogs\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import ( \"fmt\" \"strings\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs\" payload := strings . NewReader ( \"{\\\"name\\\":\\\"Murphy\\\", \\\"age\\\":2, \\\"breed\\\": \\\"French Bulldog\\\"}\" ) req , _ := http . NewRequest ( \"POST\" , url , payload ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 < HTTP/ 1.1 201 Created { \"_metadata\" : { \"created\" : 1552323811 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 2 , \"breed\" : \"French Bulldog\" , \"id\" : \"5c8694e3a7748bb224833f51\" , \"name\" : \"Murphy\" } Read \u00b6 Retrieve a single object from a collection or list all objects that exist (paginated). Retrieve single object \u00b6 To retrieve a single object, make a GET request to the collection with the ID of the object as the last path parameter. Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c Python 1 2 3 4 5 6 7 8 9 import requests url = \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" headers = {} response = requests . request ( \"GET\" , url , headers = headers ) print ( response . text ) javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"GET\" , \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import ( \"fmt\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" req , _ := http . NewRequest ( \"GET\" , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 < HTTP/ 1.1 200 OK { \"_metadata\" : { \"created\" : 1552326051 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 7 , \"breed\" : \"German Shephard\" , \"id\" : \"5c869da3a7748bb224833f5c\" , \"name\" : \"Max\" } List objects \u00b6 To retrieve a paginated list of objects for this collection, make a GET request to the collection. Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/collections/dogs Python 1 2 3 4 5 6 7 8 9 import requests url = \"https://pet-demo.machinable.io/collections/dogs\" headers = {} response = requests . request ( \"GET\" , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"GET\" , \"https://pet-demo.machinable.io/collections/dogs\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( \"fmt\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs\" req , _ := http . NewRequest ( \"GET\" , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 < HTTP/ 1.1 200 OK { \"count\" : 2 , \"items\" : [ { \"_metadata\" : { \"created\" : 1552323811 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 2 , \"breed\" : \"French Bulldog\" , \"id\" : \"5c8694e3a7748bb224833f51\" , \"name\" : \"Murphy\" }, { \"_metadata\" : { \"created\" : 1552326051 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 7 , \"breed\" : \"German Shephard\" , \"id\" : \"5c869da3a7748bb224833f5c\" , \"name\" : \"Max\" } ], \"links\" : { \"self\" : \"http://pet-demo.machinable.io/collections/dogs?_limit=10&_offset=0\" } } Notice the collection objects are returned as a list in the items key. A maximum of 10 objects will be returned by default. See Pagination for more information regarding the page limit as well as the other keys in the root of the response JSON. Update \u00b6 Update a single object's values. Bash 1 2 3 4 5 6 curl -X PUT \\ https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c \\ -d '{ \"age\": 9, \"name\": \"Maximilian\" }' Python 1 2 3 4 5 6 7 8 9 10 import requests url = \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" payload = \"{ \\n \\\" age \\\" : 9, \\n \\\" name \\\" : \\\" Maximilian \\\"\\n }\" headers = {} response = requests . request ( \"PUT\" , url , data = payload , headers = headers ) print ( response . text ) javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = \"{\\n \\\"age\\\": 9,\\n \\\"name\\\": \\\"Maximilian\\\"\\n}\" ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"PUT\" , \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import ( \"fmt\" \"strings\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" payload := strings . NewReader ( \"{\\n \\\"age\\\": 9,\\n \\\"name\\\": \\\"Maximilian\\\"\\n}\" ) req , _ := http . NewRequest ( \"PUT\" , url , payload ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 < HTTP/ 1.1 200 OK { \"_metadata\" : { \"created\" : 1552326051 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 9 , \"breed\" : \"German Shephard\" , \"id\" : \"5c869da3a7748bb224833f5c\" , \"name\" : \"Maximilian\" } Delete \u00b6 Permanently remove an object. Bash 1 2 curl -X DELETE \\ https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c Python 1 2 3 4 5 6 7 8 9 import requests url = \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" headers = {} response = requests . request ( \"DELETE\" , url , headers = headers ) print ( response . text ) javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"DELETE\" , \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import ( \"fmt\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" req , _ := http . NewRequest ( \"DELETE\" , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 < HTTP/ 1.1 204 No Content","title":"Manage Data"},{"location":"querying_data/crud/#authentication","text":"Note If your project authentication policy is disabled, you do not need to provide an Authorization header in your requests. The examples on this page do not make use of an Authorization header. Depending on how you are accessing your project's data, you may need to authenticate your requests.","title":"Authentication"},{"location":"querying_data/crud/#api-keys","text":"To make authenticated requests with an API Key , add the Authorization header with the apikey text to each request: 1 Authorization: apikey { api_key_string }","title":"API Keys"},{"location":"querying_data/crud/#users","text":"User authenticated requests require a bit more work. First, the user will need to acquire a session. To do that, make an HTTP Basic authentication request to your project's /sessions endpoint. This will return an access_token and a refresh_token in the form of JSON Web Tokens : Bash 1 2 3 4 5 6 7 8 # base64 encode username|password to make HTTP Basic authn request $ echo \"testUser:hunter2\" | base64 dGVzdFVzZXI6aHVudGVyMgo = # POST credentials to /sessions/ endpoint to recieve access token $ curl -X POST \\ https://pet-demo.machinable.io/sessions/ \\ -H 'authorization: Basic dGVzdFVzZXI6aHVudGVyMg==' Python 1 2 3 4 5 6 7 8 9 10 11 import requests url = \"https://pet-demo.machinable.io/sessions/\" headers = { 'authorization' : \"Basic dGVzdFVzZXI6aHVudGVyMg==\" } response = requests . request ( \"POST\" , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var data = null ; var xhr = new XMLHttpRequest (); xhr . withCredentials = true ; xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"POST\" , \"https://pet-demo.machinable.io/sessions/\" ); xhr . setRequestHeader ( \"authorization\" , \"Basic dGVzdFVzZXI6aHVudGVyMg==\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main import ( \"fmt\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/sessions/\" req , _ := http . NewRequest ( \"POST\" , url , nil ) req . Header . Add ( \"authorization\" , \"Basic dGVzdFVzZXI6aHVudGVyMg==\" ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 { \"access_token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTIzMjI4MTksInByb2plY3RzIjp7InBldC1kZW1vIjp0cnVlfSwidXNlciI6eyJhY3RpdmUiOnRydWUsImlkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIiwibmFtZSI6InRlc3RVc2VyIiwicmVhZCI6dHJ1ZSwidHlwZSI6InByb2plY3QiLCJ3cml0ZSI6dHJ1ZX19.93H4H3FyPGrzOGb3WHRO7RLUGezpYxbVki7oGqdyA6E\" , \"message\" : \"Successfully logged in\" , \"refresh_token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTI1ODExMTksInNlc3Npb25faWQiOiI1Yzg2OGQ3ZmE3NzQ4YmIyMjQ4MzNmNGMiLCJ1c2VyX2lkIjoiNWM4NjhkNDBhNzc0OGJiMjI0ODMzZjRiIn0.wWyb-nNff3RBw73D1hqN9k8U8_pKMHWGShMwA9YvSAc\" , \"session_id\" : \"5c868d7fa7748bb224833f4c\" } Once the user has a session, authenticated requests can be made by adding the Authorization header with the bearer text and access_token to each request: 1 Authorization: bearer { access_token } Info Access tokens have a limited lifetime of 5 minutes. They then need to be exchanged for a new Access token using the refresh token. Refer to Project Users for more information about refreshing an access token.","title":"Users"},{"location":"querying_data/crud/#create","text":"Create and store a new object in a specific Collection or API Resource. Note These examples are managing data within a Collection called dogs ( /collections/dogs ). These requests could also manage data within an API Resource called dogs at /api/dogs , given the correct JSON schema is defined. Bash 1 2 3 $ curl -X POST \\ https://pet-demo.machinable.io/collections/dogs \\ -d '{\"name\":\"Murphy\", \"age\":2, \"breed\": \"French Bulldog\"}' Python 1 2 3 4 5 6 7 8 9 10 11 12 import requests url = \"https://pet-demo.machinable.io/collections/dogs\" payload = \"{ \\\" name \\\" : \\\" Murphy \\\" , \\\" age \\\" :2, \\\" breed \\\" : \\\" French Bulldog \\\" }\" headers = { 'authorization' : \"Basic dGVzdFVzZXI6aHVudGVyMg==\" } response = requests . request ( \"POST\" , url , data = payload , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = \"{\\\"name\\\":\\\"Murphy\\\", \\\"age\\\":2, \\\"breed\\\": \\\"French Bulldog\\\"}\" ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"POST\" , \"https://pet-demo.machinable.io/collections/dogs\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import ( \"fmt\" \"strings\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs\" payload := strings . NewReader ( \"{\\\"name\\\":\\\"Murphy\\\", \\\"age\\\":2, \\\"breed\\\": \\\"French Bulldog\\\"}\" ) req , _ := http . NewRequest ( \"POST\" , url , payload ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 < HTTP/ 1.1 201 Created { \"_metadata\" : { \"created\" : 1552323811 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 2 , \"breed\" : \"French Bulldog\" , \"id\" : \"5c8694e3a7748bb224833f51\" , \"name\" : \"Murphy\" }","title":"Create"},{"location":"querying_data/crud/#read","text":"Retrieve a single object from a collection or list all objects that exist (paginated).","title":"Read"},{"location":"querying_data/crud/#retrieve-single-object","text":"To retrieve a single object, make a GET request to the collection with the ID of the object as the last path parameter. Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c Python 1 2 3 4 5 6 7 8 9 import requests url = \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" headers = {} response = requests . request ( \"GET\" , url , headers = headers ) print ( response . text ) javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"GET\" , \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import ( \"fmt\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" req , _ := http . NewRequest ( \"GET\" , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 < HTTP/ 1.1 200 OK { \"_metadata\" : { \"created\" : 1552326051 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 7 , \"breed\" : \"German Shephard\" , \"id\" : \"5c869da3a7748bb224833f5c\" , \"name\" : \"Max\" }","title":"Retrieve single object"},{"location":"querying_data/crud/#list-objects","text":"To retrieve a paginated list of objects for this collection, make a GET request to the collection. Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/collections/dogs Python 1 2 3 4 5 6 7 8 9 import requests url = \"https://pet-demo.machinable.io/collections/dogs\" headers = {} response = requests . request ( \"GET\" , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"GET\" , \"https://pet-demo.machinable.io/collections/dogs\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( \"fmt\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs\" req , _ := http . NewRequest ( \"GET\" , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 < HTTP/ 1.1 200 OK { \"count\" : 2 , \"items\" : [ { \"_metadata\" : { \"created\" : 1552323811 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 2 , \"breed\" : \"French Bulldog\" , \"id\" : \"5c8694e3a7748bb224833f51\" , \"name\" : \"Murphy\" }, { \"_metadata\" : { \"created\" : 1552326051 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 7 , \"breed\" : \"German Shephard\" , \"id\" : \"5c869da3a7748bb224833f5c\" , \"name\" : \"Max\" } ], \"links\" : { \"self\" : \"http://pet-demo.machinable.io/collections/dogs?_limit=10&_offset=0\" } } Notice the collection objects are returned as a list in the items key. A maximum of 10 objects will be returned by default. See Pagination for more information regarding the page limit as well as the other keys in the root of the response JSON.","title":"List objects"},{"location":"querying_data/crud/#update","text":"Update a single object's values. Bash 1 2 3 4 5 6 curl -X PUT \\ https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c \\ -d '{ \"age\": 9, \"name\": \"Maximilian\" }' Python 1 2 3 4 5 6 7 8 9 10 import requests url = \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" payload = \"{ \\n \\\" age \\\" : 9, \\n \\\" name \\\" : \\\" Maximilian \\\"\\n }\" headers = {} response = requests . request ( \"PUT\" , url , data = payload , headers = headers ) print ( response . text ) javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = \"{\\n \\\"age\\\": 9,\\n \\\"name\\\": \\\"Maximilian\\\"\\n}\" ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"PUT\" , \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import ( \"fmt\" \"strings\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" payload := strings . NewReader ( \"{\\n \\\"age\\\": 9,\\n \\\"name\\\": \\\"Maximilian\\\"\\n}\" ) req , _ := http . NewRequest ( \"PUT\" , url , payload ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 < HTTP/ 1.1 200 OK { \"_metadata\" : { \"created\" : 1552326051 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 9 , \"breed\" : \"German Shephard\" , \"id\" : \"5c869da3a7748bb224833f5c\" , \"name\" : \"Maximilian\" }","title":"Update"},{"location":"querying_data/crud/#delete","text":"Permanently remove an object. Bash 1 2 curl -X DELETE \\ https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c Python 1 2 3 4 5 6 7 8 9 import requests url = \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" headers = {} response = requests . request ( \"DELETE\" , url , headers = headers ) print ( response . text ) javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"DELETE\" , \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import ( \"fmt\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" req , _ := http . NewRequest ( \"DELETE\" , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 < HTTP/ 1.1 204 No Content","title":"Delete"},{"location":"querying_data/filtering/","text":"","title":"Filtering"},{"location":"querying_data/pagination/","text":"When making calls to Machinable API Resources or Collections, there may be a ton of results to return, depending on your use case. In order to keep response sizes small and more manageable, results are returned as a paginated list. Take a look at the response of the following list operation to the dogs Collection in our Pet Demo project: Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/collections/dogs Python 1 2 3 4 5 6 7 8 9 import requests url = \"https://pet-demo.machinable.io/collections/dogs\" headers = {} response = requests . request ( \"GET\" , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"GET\" , \"https://pet-demo.machinable.io/collections/dogs\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( \"fmt\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs\" req , _ := http . NewRequest ( \"GET\" , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 < HTTP/ 1.1 200 OK { \"count\" : 2 , \"items\" : [ { \"_metadata\" : { \"created\" : 1552323811 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 2 , \"breed\" : \"French Bulldog\" , \"id\" : \"5c8694e3a7748bb224833f51\" , \"name\" : \"Murphy\" }, { \"_metadata\" : { \"created\" : 1552326051 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 7 , \"breed\" : \"German Shephard\" , \"id\" : \"5c869da3a7748bb224833f5c\" , \"name\" : \"Max\" } ], \"links\" : { \"self\" : \"http://pet-demo.machinable.io/collections/dogs?_limit=10&_offset=0\" } } As you can see, there are 3 keys at the root of the JSON response; count , links , and items . count is the total count of results for the query. Based on our request, we now know there are a total of 2 dogs in the dogs collection because we are not filtering the data in any way. links provides context to what URLs we can request to traverse forward or backward through the paginated results. items contains each object returned for the page we are requesting . The page we are requesting is determined by the query parameters _limit and _offset . Limit \u00b6 _limit is a query parameter that can be used to specify how many results you would like to see in a single response payload. If we take a look at our sample request above, we'll see that we are not specifying a limit, so Machinable will default the page size to 10. If we specify _limit of 1 , we will only get the first result of the dogs objects: Bash 1 2 curl -X GET \\ \"https://pet-demo.machinable.io/collections/dogs?_limit=1\" Python 1 2 3 4 5 6 7 8 9 import requests url = \"https://pet-demo.machinable.io/collections/dogs?_limit=1\" headers = {} response = requests . request ( \"GET\" , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"GET\" , \"https://pet-demo.machinable.io/collections/dogs?_limit=1\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( \"fmt\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs?_limit=1\" req , _ := http . NewRequest ( \"GET\" , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 < HTTP/ 1.1 200 OK { \"count\" : 2 , \"items\" : [ { \"_metadata\" : { \"created\" : 1552323811 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 2 , \"breed\" : \"French Bulldog\" , \"id\" : \"5c8694e3a7748bb224833f51\" , \"name\" : \"Murphy\" } ], \"links\" : { \"self\" : \"http://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=0\" , \"next\" : \"http://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=1\" } } Info The _limit query parameter has the following constraints: Maximum: 100 Minimum: 1 Default: 10 Offset \u00b6 _limit is a query parameter that can be used to specify how many results to skip before the response payload is built and returned. If we take a look at our sample request above, we'll see that we are not specifying an offset, so Machinable will default the offset to 0, giving us the first page of the results. If we continue to build off of the request in our example and provide an _offset of 1 with a _limit of 1 , we will get the second \"page\" of results. Since there are only 2 dogs in the collection, the second page will be the last page: Bash 1 2 curl -X GET \\ \"https://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=1\" Python 1 2 3 4 5 6 7 8 9 import requests url = \"https://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=1\" headers = {} response = requests . request ( \"GET\" , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"GET\" , \"https://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=1\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( \"fmt\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=1\" req , _ := http . NewRequest ( \"GET\" , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 < HTTP/ 1.1 200 OK { \"count\" : 2 , \"items\" : [ { \"_metadata\" : { \"created\" : 1552339933 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 7 , \"breed\" : \"German Shephard\" , \"id\" : \"5c86d3dda7748bb224833f68\" , \"name\" : \"Max\" } ], \"links\" : { \"self\" : \"http://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=1\" , \"prev\" : \"http://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=0\" } } Info The _offset query parameter has the following constraints: Minimum: 0 Default: 0 With the use of _limit and _offset we can traverse the entire list of results without having to return all of them in a single request. Links \u00b6 The links field provides contextual URLs for the current ( self ), next , and prev (previous) page of results. This can be helpful when creating a paginated table of data so the table does not have to keep track of which page it is on (limit and offset), only what the next and prev URLs are, which will be returned with each list request.","title":"Pagination"},{"location":"querying_data/pagination/#limit","text":"_limit is a query parameter that can be used to specify how many results you would like to see in a single response payload. If we take a look at our sample request above, we'll see that we are not specifying a limit, so Machinable will default the page size to 10. If we specify _limit of 1 , we will only get the first result of the dogs objects: Bash 1 2 curl -X GET \\ \"https://pet-demo.machinable.io/collections/dogs?_limit=1\" Python 1 2 3 4 5 6 7 8 9 import requests url = \"https://pet-demo.machinable.io/collections/dogs?_limit=1\" headers = {} response = requests . request ( \"GET\" , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"GET\" , \"https://pet-demo.machinable.io/collections/dogs?_limit=1\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( \"fmt\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs?_limit=1\" req , _ := http . NewRequest ( \"GET\" , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 < HTTP/ 1.1 200 OK { \"count\" : 2 , \"items\" : [ { \"_metadata\" : { \"created\" : 1552323811 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 2 , \"breed\" : \"French Bulldog\" , \"id\" : \"5c8694e3a7748bb224833f51\" , \"name\" : \"Murphy\" } ], \"links\" : { \"self\" : \"http://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=0\" , \"next\" : \"http://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=1\" } } Info The _limit query parameter has the following constraints: Maximum: 100 Minimum: 1 Default: 10","title":"Limit"},{"location":"querying_data/pagination/#offset","text":"_limit is a query parameter that can be used to specify how many results to skip before the response payload is built and returned. If we take a look at our sample request above, we'll see that we are not specifying an offset, so Machinable will default the offset to 0, giving us the first page of the results. If we continue to build off of the request in our example and provide an _offset of 1 with a _limit of 1 , we will get the second \"page\" of results. Since there are only 2 dogs in the collection, the second page will be the last page: Bash 1 2 curl -X GET \\ \"https://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=1\" Python 1 2 3 4 5 6 7 8 9 import requests url = \"https://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=1\" headers = {} response = requests . request ( \"GET\" , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"GET\" , \"https://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=1\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( \"fmt\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=1\" req , _ := http . NewRequest ( \"GET\" , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 < HTTP/ 1.1 200 OK { \"count\" : 2 , \"items\" : [ { \"_metadata\" : { \"created\" : 1552339933 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 7 , \"breed\" : \"German Shephard\" , \"id\" : \"5c86d3dda7748bb224833f68\" , \"name\" : \"Max\" } ], \"links\" : { \"self\" : \"http://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=1\" , \"prev\" : \"http://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=0\" } } Info The _offset query parameter has the following constraints: Minimum: 0 Default: 0 With the use of _limit and _offset we can traverse the entire list of results without having to return all of them in a single request.","title":"Offset"},{"location":"querying_data/pagination/#links","text":"The links field provides contextual URLs for the current ( self ), next , and prev (previous) page of results. This can be helpful when creating a paginated table of data so the table does not have to keep track of which page it is on (limit and offset), only what the next and prev URLs are, which will be returned with each list request.","title":"Links"},{"location":"querying_data/sorting/","text":"","title":"Sorting"},{"location":"querying_data/queries/create/","text":"Bash 1 2 3 $ curl -X POST \\ https://pet-demo.machinable.io/collections/dogs \\ -d '{\"name\":\"Murphy\", \"age\":2, \"breed\": \"French Bulldog\"}' Python 1 2 3 4 5 6 7 8 9 10 11 12 import requests url = \"https://pet-demo.machinable.io/collections/dogs\" payload = \"{ \\\" name \\\" : \\\" Murphy \\\" , \\\" age \\\" :2, \\\" breed \\\" : \\\" French Bulldog \\\" }\" headers = { 'authorization' : \"Basic dGVzdFVzZXI6aHVudGVyMg==\" } response = requests . request ( \"POST\" , url , data = payload , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = \"{\\\"name\\\":\\\"Murphy\\\", \\\"age\\\":2, \\\"breed\\\": \\\"French Bulldog\\\"}\" ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"POST\" , \"https://pet-demo.machinable.io/collections/dogs\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import ( \"fmt\" \"strings\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs\" payload := strings . NewReader ( \"{\\\"name\\\":\\\"Murphy\\\", \\\"age\\\":2, \\\"breed\\\": \\\"French Bulldog\\\"}\" ) req , _ := http . NewRequest ( \"POST\" , url , payload ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 < HTTP/ 1.1 201 Created { \"_metadata\" : { \"created\" : 1552323811 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 2 , \"breed\" : \"French Bulldog\" , \"id\" : \"5c8694e3a7748bb224833f51\" , \"name\" : \"Murphy\" }","title":"Create"},{"location":"querying_data/queries/delete/","text":"Bash 1 2 curl -X DELETE \\ https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c Python 1 2 3 4 5 6 7 8 9 import requests url = \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" headers = {} response = requests . request ( \"DELETE\" , url , headers = headers ) print ( response . text ) javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"DELETE\" , \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import ( \"fmt\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" req , _ := http . NewRequest ( \"DELETE\" , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 < HTTP/ 1.1 204 No Content","title":"Delete"},{"location":"querying_data/queries/get/","text":"Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c Python 1 2 3 4 5 6 7 8 9 import requests url = \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" headers = {} response = requests . request ( \"GET\" , url , headers = headers ) print ( response . text ) javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"GET\" , \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import ( \"fmt\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" req , _ := http . NewRequest ( \"GET\" , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 < HTTP/ 1.1 200 OK { \"_metadata\" : { \"created\" : 1552326051 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 7 , \"breed\" : \"German Shephard\" , \"id\" : \"5c869da3a7748bb224833f5c\" , \"name\" : \"Max\" }","title":"Get"},{"location":"querying_data/queries/list.1/","text":"Bash 1 2 curl -X GET \\ \"https://pet-demo.machinable.io/collections/dogs?_limit=1\" Python 1 2 3 4 5 6 7 8 9 import requests url = \"https://pet-demo.machinable.io/collections/dogs?_limit=1\" headers = {} response = requests . request ( \"GET\" , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"GET\" , \"https://pet-demo.machinable.io/collections/dogs?_limit=1\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( \"fmt\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs?_limit=1\" req , _ := http . NewRequest ( \"GET\" , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 < HTTP/ 1.1 200 OK { \"count\" : 2 , \"items\" : [ { \"_metadata\" : { \"created\" : 1552323811 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 2 , \"breed\" : \"French Bulldog\" , \"id\" : \"5c8694e3a7748bb224833f51\" , \"name\" : \"Murphy\" } ], \"links\" : { \"self\" : \"http://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=0\" , \"next\" : \"http://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=1\" } }","title":"List.1"},{"location":"querying_data/queries/list.2/","text":"Bash 1 2 curl -X GET \\ \"https://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=1\" Python 1 2 3 4 5 6 7 8 9 import requests url = \"https://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=1\" headers = {} response = requests . request ( \"GET\" , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"GET\" , \"https://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=1\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( \"fmt\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=1\" req , _ := http . NewRequest ( \"GET\" , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 < HTTP/ 1.1 200 OK { \"count\" : 2 , \"items\" : [ { \"_metadata\" : { \"created\" : 1552339933 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 7 , \"breed\" : \"German Shephard\" , \"id\" : \"5c86d3dda7748bb224833f68\" , \"name\" : \"Max\" } ], \"links\" : { \"self\" : \"http://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=1\" , \"prev\" : \"http://pet-demo.machinable.io/collections/dogs?_limit=1&_offset=0\" } }","title":"List.2"},{"location":"querying_data/queries/list/","text":"Bash 1 2 curl -X GET \\ https://pet-demo.machinable.io/collections/dogs Python 1 2 3 4 5 6 7 8 9 import requests url = \"https://pet-demo.machinable.io/collections/dogs\" headers = {} response = requests . request ( \"GET\" , url , headers = headers ) print ( response . text ) Javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = null ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"GET\" , \"https://pet-demo.machinable.io/collections/dogs\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( \"fmt\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs\" req , _ := http . NewRequest ( \"GET\" , url , nil ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 < HTTP/ 1.1 200 OK { \"count\" : 2 , \"items\" : [ { \"_metadata\" : { \"created\" : 1552323811 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 2 , \"breed\" : \"French Bulldog\" , \"id\" : \"5c8694e3a7748bb224833f51\" , \"name\" : \"Murphy\" }, { \"_metadata\" : { \"created\" : 1552326051 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 7 , \"breed\" : \"German Shephard\" , \"id\" : \"5c869da3a7748bb224833f5c\" , \"name\" : \"Max\" } ], \"links\" : { \"self\" : \"http://pet-demo.machinable.io/collections/dogs?_limit=10&_offset=0\" } }","title":"List"},{"location":"querying_data/queries/update/","text":"Bash 1 2 3 4 5 6 curl -X PUT \\ https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c \\ -d '{ \"age\": 9, \"name\": \"Maximilian\" }' Python 1 2 3 4 5 6 7 8 9 10 import requests url = \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" payload = \"{ \\n \\\" age \\\" : 9, \\n \\\" name \\\" : \\\" Maximilian \\\"\\n }\" headers = {} response = requests . request ( \"PUT\" , url , data = payload , headers = headers ) print ( response . text ) javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 var data = \"{\\n \\\"age\\\": 9,\\n \\\"name\\\": \\\"Maximilian\\\"\\n}\" ; var xhr = new XMLHttpRequest (); xhr . addEventListener ( \"readystatechange\" , function () { if ( this . readyState === 4 ) { console . log ( this . responseText ); } }); xhr . open ( \"PUT\" , \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" ); xhr . send ( data ); Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import ( \"fmt\" \"strings\" \"net/http\" \"io/ioutil\" ) func main () { url := \"https://pet-demo.machinable.io/collections/dogs/5c869da3a7748bb224833f5c\" payload := strings . NewReader ( \"{\\n \\\"age\\\": 9,\\n \\\"name\\\": \\\"Maximilian\\\"\\n}\" ) req , _ := http . NewRequest ( \"PUT\" , url , payload ) res , _ := http . DefaultClient . Do ( req ) defer res . Body . Close () body , _ := ioutil . ReadAll ( res . Body ) fmt . Println ( res ) fmt . Println ( string ( body )) } Successful response: 1 2 3 4 5 6 7 8 9 10 11 12 13 < HTTP/ 1.1 200 OK { \"_metadata\" : { \"created\" : 1552326051 , \"creator\" : \"anonymous\" , \"creator_type\" : \"anonymous\" }, \"age\" : 9 , \"breed\" : \"German Shephard\" , \"id\" : \"5c869da3a7748bb224833f5c\" , \"name\" : \"Maximilian\" }","title":"Update"},{"location":"reference/json_schema/","text":"JSON Schema \u00b6 Machinable API Resource properties are defined with JSON Schema. This section provides helpful information and quick links on the topic of JSON Schema. JSON Schema is a vocabulary that allows you to annotate and validate JSON documents. Understanding JSON Schema is a great reference for those that want to understand the basics of JSON Schema, without diving into the technical specification. For more information about the JSON Schema specification, refer to https://json-schema.org . Examples \u00b6 These examples are meant to give you a high level idea of how to structure your data types in Machinable. Person Schema \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 { \"firstName\" : { \"type\" : \"string\" , \"description\" : \"The person's first name.\" }, \"lastName\" : { \"type\" : \"string\" , \"description\" : \"The person's last name.\" }, \"age\" : { \"description\" : \"Age in years which must be equal to or greater than zero.\" , \"type\" : \"integer\" , \"minimum\" : 0 }, \"birthDate\" : { \"description\" : \"The date of this person's birth, represented by a RFC3339 formated date-time string\" , \"format\" : \"date-time\" , \"type\" : \"string\" }, \"friends\" : { \"description\" : \"A list of this person's friends\" , \"items\" : { \"type\" : \"string\" }, \"type\" : \"array\" }, \"profession\" : { \"description\" : \"The profession of this person. What they do for a career or their lifestyle.\" , \"type\" : \"object\" , \"properties\" : { \"title\" : { \"type\" : \"string\" }, \"years\" : { \"type\" : \"number\" , \"description\" : \"The number of years this person has spent with this profession\" }, \"responsibilites\" : { \"description\" : \"A list of this profession's responsibilities\" , \"items\" : { \"type\" : \"string\" }, \"type\" : \"array\" } } } } Person sample data: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \"firstName\" : \"Jonathan\" , \"lastName\" : \"Gilmore\" , \"age\" : 29 , \"birthDate\" : \"1989-07-20T04:00:00Z\" , \"friends\" : [ \"Renee Scott\" , \"Mrs. Brenda Harris\" , \"Charles Miller\" , \"Marc Webb\" ], \"profession\" : { \"title\" : \"Lumberjack\" , \"years\" : 10.5 , \"responsibilites\" : [ \"North American workers in the logging industry who perform the initial harvesting and transport of trees for ultimate processing into forest products.\" ] } }","title":"JSON Schema"},{"location":"reference/json_schema/#json-schema","text":"Machinable API Resource properties are defined with JSON Schema. This section provides helpful information and quick links on the topic of JSON Schema. JSON Schema is a vocabulary that allows you to annotate and validate JSON documents. Understanding JSON Schema is a great reference for those that want to understand the basics of JSON Schema, without diving into the technical specification. For more information about the JSON Schema specification, refer to https://json-schema.org .","title":"JSON Schema"},{"location":"reference/json_schema/#examples","text":"These examples are meant to give you a high level idea of how to structure your data types in Machinable.","title":"Examples"},{"location":"reference/json_schema/#person-schema","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 { \"firstName\" : { \"type\" : \"string\" , \"description\" : \"The person's first name.\" }, \"lastName\" : { \"type\" : \"string\" , \"description\" : \"The person's last name.\" }, \"age\" : { \"description\" : \"Age in years which must be equal to or greater than zero.\" , \"type\" : \"integer\" , \"minimum\" : 0 }, \"birthDate\" : { \"description\" : \"The date of this person's birth, represented by a RFC3339 formated date-time string\" , \"format\" : \"date-time\" , \"type\" : \"string\" }, \"friends\" : { \"description\" : \"A list of this person's friends\" , \"items\" : { \"type\" : \"string\" }, \"type\" : \"array\" }, \"profession\" : { \"description\" : \"The profession of this person. What they do for a career or their lifestyle.\" , \"type\" : \"object\" , \"properties\" : { \"title\" : { \"type\" : \"string\" }, \"years\" : { \"type\" : \"number\" , \"description\" : \"The number of years this person has spent with this profession\" }, \"responsibilites\" : { \"description\" : \"A list of this profession's responsibilities\" , \"items\" : { \"type\" : \"string\" }, \"type\" : \"array\" } } } } Person sample data: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \"firstName\" : \"Jonathan\" , \"lastName\" : \"Gilmore\" , \"age\" : 29 , \"birthDate\" : \"1989-07-20T04:00:00Z\" , \"friends\" : [ \"Renee Scott\" , \"Mrs. Brenda Harris\" , \"Charles Miller\" , \"Marc Webb\" ], \"profession\" : { \"title\" : \"Lumberjack\" , \"years\" : 10.5 , \"responsibilites\" : [ \"North American workers in the logging industry who perform the initial harvesting and transport of trees for ultimate processing into forest products.\" ] } }","title":"Person Schema"},{"location":"reference/sample_projects/","text":"","title":"Sample Projects"}]}